---
import { getHealthDrawsForChart2025 } from '../lib/immiwatch-data';

// Fetch historical HEALTH draw data for 2025
const chartData = await getHealthDrawsForChart2025();
const labels = chartData.map(draw => draw.drawDate);
const crsScores = chartData.map(draw => draw.crsScore);
const invitations = chartData.map(draw => draw.invitationsIssued);
---

<!-- Healthcare Trends 2025 - Live Chart -->
<div class="insight-card bg-white dark:bg-gray-800 rounded-3xl border-2 border-gray-300 dark:border-gray-600 p-8 hover:border-green-400 dark:hover:border-green-500 transition-all duration-500 shadow-xl hover:shadow-3xl hover:scale-[1.02] transform group">
  <div class="flex items-center gap-4 mb-6">
    <div class="w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-500 animate-float-gentle">
      <span class="text-2xl group-hover:scale-110 transition-transform duration-500">ðŸ“ˆ</span>
    </div>
    <div>
      <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Healthcare Trends 2025</h3>
      <p class="text-gray-600 dark:text-gray-300">CRS Scores & Invitations Over Time</p>
    </div>
  </div>

  {chartData.length > 0 ? (
    <div class="relative">
      <canvas id="healthChart" class="w-full h-80"></canvas>
    </div>
  ) : (
    <!-- No Data State -->
    <div class="flex flex-col items-center justify-center h-80 text-center">
      <div class="w-24 h-24 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mb-4">
        <span class="text-4xl text-gray-400">ðŸ“Š</span>
      </div>
      <h3 class="text-xl font-semibold text-gray-600 dark:text-gray-400 mb-2">No Data Available</h3>
      <p class="text-gray-500 dark:text-gray-500">Healthcare draw data for 2025 will appear here</p>
    </div>
  )}
</div>

<script>
  import Chart from 'chart.js/auto';

  document.addEventListener('DOMContentLoaded', function() {
    const ctx = document.getElementById('healthChart');
    if (!ctx) return;

    const chartData = {
      labels: JSON.parse(document.getElementById('chartLabels').textContent),
      datasets: [
        {
          label: 'CRS Score',
          data: JSON.parse(document.getElementById('chartCRS').textContent),
          borderColor: '#10b981',
          backgroundColor: 'rgba(16, 185, 129, 0.1)',
          yAxisID: 'y',
          type: 'line',
          tension: 0.4,
          pointRadius: 6,
          pointHoverRadius: 8
        },
        {
          label: 'Invitations',
          data: JSON.parse(document.getElementById('chartInvitations').textContent),
          backgroundColor: 'rgba(34, 197, 94, 0.8)',
          borderColor: '#22c55e',
          yAxisID: 'y1',
          type: 'bar',
          borderRadius: 4
        }
      ]
    };

    const crsScores = JSON.parse(document.getElementById('chartCRS').textContent);
    const minCRS = Math.min(...crsScores);

    const config = {
      type: 'line',
      data: chartData,
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          mode: 'index',
          intersect: false,
        },
        scales: {
          x: {
            display: true,
            title: {
              display: true,
              text: 'Draw Date'
            },
            grid: {
              color: 'rgba(156, 163, 175, 0.2)'
            }
          },
          y: {
            type: 'linear',
            display: true,
            position: 'left',
            title: {
              display: true,
              text: 'CRS Score'
            },
            grid: {
              color: 'rgba(156, 163, 175, 0.2)'
            },
            min: minCRS - 10
          },
          y1: {
            type: 'linear',
            display: true,
            position: 'right',
            title: {
              display: true,
              text: 'Invitations'
            },
            grid: {
              drawOnChartArea: false,
            },
            min: 0
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            titleColor: 'white',
            bodyColor: 'white',
            borderColor: 'rgba(16, 185, 129, 0.5)',
            borderWidth: 1
          }
        }
      }
    };

    new Chart(ctx, config);
  });
</script>

<!-- Hidden data elements for Chart.js -->
<div id="chartLabels" style="display: none;">{JSON.stringify(labels)}</div>
<div id="chartCRS" style="display: none;">{JSON.stringify(crsScores)}</div>
<div id="chartInvitations" style="display: none;">{JSON.stringify(invitations)}</div>
