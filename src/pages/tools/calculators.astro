---
import Layout from '../../layouts/Layout.astro';
import { getLatestExpressEntryDraw } from '../../lib/immiwatch-data';

export const metadata = {
  title: 'CRS Calculator & FSW Points Calculator - Free Express Entry Tools',
  description: 'Calculate your CRS score for Express Entry and FSW points with our comprehensive calculators. Get real-time scoring, detailed breakdowns, live draw comparisons, and eligibility assessment for Canadian immigration.',
  keywords: 'CRS calculator, FSW calculator, Express Entry calculator, Comprehensive Ranking System, Federal Skilled Worker, Canada immigration points, Express Entry score, immigration calculator',
  image: 'https://20597210.fs1.hubspotusercontent-na1.net/hubfs/20597210/logo%20banner.jpg',
  canonical: 'https://immigratic.com/tools/calculators'
};

// Fetch latest draw data at build time
let latestDrawData = null;
try {
  latestDrawData = await getLatestExpressEntryDraw();
  console.log('Server-side draw data fetched:', latestDrawData);
} catch (error) {
  console.error('Error fetching latest draw:', error);
}
---

<Layout title={metadata.title} description={metadata.description}>
  
  <!-- Hero Section -->
  <section class="relative py-32 min-h-[85vh] flex items-center bg-gradient-to-br from-blue-600 via-purple-700 to-indigo-800 dark:from-blue-800 dark:via-purple-900 dark:to-indigo-900 overflow-hidden">
    <div class="absolute inset-0 bg-black/20"></div>
    
    <!-- Floating Background Elements -->
    <div class="absolute top-20 left-10 w-20 h-20 bg-white/10 rounded-full blur-xl animate-pulse"></div>
    <div class="absolute bottom-20 right-10 w-32 h-32 bg-purple-300/20 rounded-full blur-2xl animate-pulse" style="animation-delay: 2s;"></div>
    <div class="absolute top-1/2 left-1/3 w-16 h-16 bg-blue-300/20 rounded-full blur-xl animate-pulse" style="animation-delay: 4s;"></div>
    
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-4xl md:text-6xl font-bold text-white mb-6">
        Immigration
        <span class="block bg-gradient-to-r from-blue-200 to-purple-200 bg-clip-text text-transparent">
          Calculators
        </span>
      </h1>
      <p class="text-xl md:text-2xl text-blue-100 mb-8 max-w-4xl mx-auto">
        Calculate your CRS score, program eligibility, and immigration prospects with our comprehensive, accurate calculators.
      </p>
      
      <!-- Primary CTA -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        <button onclick="scrollToCalculators()" class="inline-flex items-center px-8 py-4 bg-white text-blue-600 font-semibold rounded-xl hover:bg-blue-50 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl">
          üßÆ Start Calculating
          <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        <a href="/tools/master-assessment" class="inline-flex items-center px-8 py-4 bg-transparent border-2 border-white/30 text-white font-semibold rounded-xl hover:bg-white/10 transition-all duration-300 transform hover:scale-105">
          üìã Full Assessment
        </a>
      </div>
    </div>
  </section>

  <!-- Calculator Selection Section -->
  <section id="calculators" class="py-16 bg-gray-50 dark:bg-gray-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Section Header -->
      <div class="text-center mb-12">
        <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
          Choose Your Calculator
        </h2>
        <p class="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
          Click on a calculator below to get started. Each calculator is designed to give you accurate, up-to-date scoring based on current IRCC guidelines.
        </p>
      </div>

      <!-- Calculator Cards Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
        
        <!-- CRS Calculator -->
        <div class="calculator-card group bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-lg border border-gray-200 dark:border-gray-700 hover:shadow-2xl hover:scale-105 hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-500 cursor-pointer" data-calculator="crs">
          <div class="text-center">
            <div class="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:rotate-12 group-hover:scale-110 transition-transform duration-300 shadow-lg">
              <span class="text-3xl">üéØ</span>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
              CRS Calculator
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-6">
              Calculate your Comprehensive Ranking System score for Express Entry. Get your exact points breakdown.
            </p>
            <div class="flex items-center justify-center gap-2 text-sm text-blue-600 dark:text-blue-400 font-medium">
              <span>Most Popular</span>
              <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
            </div>
          </div>
        </div>

        <!-- FSW Calculator -->
        <div class="calculator-card group bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-lg border border-gray-200 dark:border-gray-700 hover:shadow-2xl hover:scale-105 hover:border-green-300 dark:hover:border-green-600 transition-all duration-500 cursor-pointer" data-calculator="fsw">
          <div class="text-center">
            <div class="w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:rotate-12 group-hover:scale-110 transition-transform duration-300 shadow-lg">
              <span class="text-3xl">üåç</span>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-green-600 dark:group-hover:text-green-400 transition-colors">
              FSW Calculator
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-6">
              Federal Skilled Worker eligibility calculator. Check if you meet the minimum requirements and calculate your points.
            </p>
            <div class="flex items-center justify-center gap-2 text-sm text-green-600 dark:text-green-400 font-medium">
              <span>Available Now</span>
              <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
            </div>
          </div>
        </div>

        <!-- OINP Calculator -->
        <div class="calculator-card group bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-lg border border-gray-200 dark:border-gray-700 hover:shadow-2xl hover:scale-105 hover:border-purple-300 dark:hover:border-purple-600 transition-all duration-500 cursor-pointer" data-calculator="oinp">
          <div class="text-center">
            <div class="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:rotate-12 group-hover:scale-110 transition-transform duration-300 shadow-lg">
              <span class="text-3xl">üèõÔ∏è</span>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-3 group-hover:text-purple-600 dark:group-hover:text-purple-400 transition-colors">
              OINP Calculator
            </h3>
            <p class="text-gray-600 dark:text-gray-400 mb-6">
              Ontario Immigrant Nominee Program eligibility for various streams and categories.
            </p>
            <div class="flex items-center justify-center gap-2 text-sm text-gray-500 dark:text-gray-400">
              <span>Coming Soon</span>
            </div>
          </div>
        </div>

      </div>

      <!-- Additional Calculators Preview -->
      <div class="text-center">
        <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-4">More Provincial Calculators Coming Soon</h3>
        <div class="flex flex-wrap justify-center gap-4">
          <span class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded-full text-sm">üèîÔ∏è BCPNP Calculator</span>
          <span class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded-full text-sm">üõ¢Ô∏è Alberta AINP Calculator</span>
          <span class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded-full text-sm">üåæ Saskatchewan SINP Calculator</span>
          <span class="px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded-full text-sm">‚öúÔ∏è Quebec QSW Calculator</span>
        </div>
      </div>

    </div>
  </section>

  <!-- CRS Calculator Section -->
  <section id="crs-calculator" class="py-16 bg-white dark:bg-gray-800" style="display: none;">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Calculator Header -->
      <div class="text-center mb-12">
        <div class="inline-flex items-center gap-3 mb-4">
          <div class="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
            <span class="text-2xl">üéØ</span>
          </div>
          <h2 class="text-3xl font-bold text-gray-900 dark:text-white">CRS Score Calculator</h2>
        </div>
        <p class="text-lg text-gray-600 dark:text-gray-300 mb-6">
          Calculate your Comprehensive Ranking System (CRS) score for Express Entry
        </p>
        
        <!-- Progress Bar -->
        <div class="bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-4">
          <div id="progress-bar" class="bg-gradient-to-r from-blue-500 to-purple-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
        </div>
        <div class="text-sm text-gray-500 dark:text-gray-400">
          <span id="progress-text">Step 1 of 6</span>
        </div>
        
        <!-- Total Score Display -->
        <div id="total-score-display" class="mt-6 text-center bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-4 border border-blue-200 dark:border-blue-700" style="display: none;">
          <div class="text-sm text-gray-600 dark:text-gray-400 mb-1">Current CRS Score</div>
          <div class="text-3xl font-bold text-blue-600 dark:text-blue-400">
            <span id="total-score-value">0</span>
          </div>
          <div class="text-xs text-gray-500 dark:text-gray-400">out of ~600 maximum</div>
        </div>
      </div>

      <!-- Calculator Form Container -->
      <div class="bg-gray-50 dark:bg-gray-900 rounded-2xl p-8 shadow-inner">
        
        <!-- Step Indicator -->
        <div class="flex justify-center mb-8 overflow-x-auto">
          <div class="flex items-center space-x-2 sm:space-x-4 min-w-max px-4">
            <div class="step-indicator active" data-step="1">
              <span class="step-number">1</span>
              <span class="step-label">Personal</span>
            </div>
            <div class="step-line"></div>
            <div class="step-indicator" data-step="2">
              <span class="step-number">2</span>
              <span class="step-label">Education</span>
            </div>
            <div class="step-line"></div>
            <div class="step-indicator" data-step="3">
              <span class="step-number">3</span>
              <span class="step-label">Language</span>
            </div>
            <div class="step-line"></div>
            <div class="step-indicator" data-step="4">
              <span class="step-number">4</span>
              <span class="step-label">Experience</span>
            </div>
            <div class="step-line"></div>
            <div class="step-indicator" data-step="5">
              <span class="step-number">5</span>
              <span class="step-label">Spouse</span>
            </div>
            <div class="step-line"></div>
            <div class="step-indicator" data-step="6">
              <span class="step-number">6</span>
              <span class="step-label">Additional</span>
            </div>
          </div>
        </div>

        <!-- Calculator Form -->
        <form id="crs-calculator-form" class="space-y-8">
          
          <!-- Step 1: Personal Information -->
          <div class="calculator-step active" data-step="1">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Personal Information</h3>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Age -->
              <div class="form-group">
                <label class="form-label" for="age">
                  <span class="label-text">Your Age</span>
                  <span class="label-required">*</span>
                </label>
                <input type="number" id="age" name="age" class="form-input" min="17" max="50" placeholder="Enter your age">
                <div class="form-help">Age on the date you submit your Express Entry application</div>
                <div id="age-points" class="points-display" style="display: none;">
                  <span class="points-text">Points: <strong class="points-value">0</strong></span>
                </div>
              </div>

              <!-- Marital Status -->
              <div class="form-group">
                <label class="form-label" for="marital-status">
                  <span class="label-text">Marital Status</span>
                  <span class="label-required">*</span>
                </label>
                <!-- Simple native select with mobile-optimized styling -->
                <select id="marital-status" name="marital-status" class="form-input mobile-optimized-select">
                  <option value="">Select your marital status</option>
                  <option value="single">Single / Never married</option>
                  <option value="married">Married / Common-law partner</option>
                </select>
                <div class="form-help">Common-law means living together for 1+ years</div>
              </div>
            </div>

            <!-- Spouse Accompanying Question -->
            <div id="spouse-accompanying-section" class="mt-6" style="display: none;">
              <div class="form-group">
                <label class="form-label">
                  <span class="label-text">Will your spouse/partner accompany you to Canada?</span>
                  <span class="label-required">*</span>
                </label>
                <div class="radio-group">
                  <label class="radio-option">
                    <input type="radio" name="spouse-accompanying" value="yes" class="radio-input">
                    <span class="radio-label">Yes, they will accompany me</span>
                  </label>
                  <label class="radio-option">
                    <input type="radio" name="spouse-accompanying" value="no" class="radio-input">
                    <span class="radio-label">No, they will not accompany me</span>
                  </label>
                </div>
                <div class="form-help">This affects your scoring - you may get more points as single applicant</div>
              </div>
            </div>
          </div>

          <!-- Step 2: Education -->
          <div class="calculator-step" data-step="2" style="display: none;">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Education</h3>
            
            <div class="form-group">
              <label class="form-label" for="education">
                <span class="label-text">Highest Level of Education</span>
                <span class="label-required">*</span>
              </label>
              <select id="education" name="education" class="form-input">
                <option value="">Select your highest education level</option>
                <option value="less_than_secondary">Less than secondary school (high school)</option>
                <option value="secondary_diploma">Secondary diploma (high school graduation)</option>
                <option value="one_year_post_secondary">One-year post-secondary program</option>
                <option value="two_year_post_secondary">Two-year post-secondary program</option>
                <option value="bachelors_or_three_year_post_secondary">Bachelor's degree OR three-year post-secondary program</option>
                <option value="two_or_more_post_secondary_one_at_least_three_years">Two or more post-secondary programs (one at least 3 years)</option>
                <option value="masters_or_professional_degree">Master's degree OR professional degree</option>
                <option value="doctoral">Doctoral level university degree (PhD)</option>
              </select>
              <div class="form-help">Choose the Canadian equivalent of your highest education</div>
              <div id="education-points" class="points-display" style="display: none;">
                <span class="points-text">Points: <strong class="points-value">0</strong></span>
              </div>
            </div>

                    <!-- ECA Info (Simplified) -->
        <div class="text-xs text-gray-500 dark:text-gray-400 mt-2">
          üí° Need ECA if studied outside Canada: WES, ICAS, CES, PEBC, MCC, NNAS
        </div>
          </div>

          <!-- Step 3: Language Proficiency -->
          <div class="calculator-step" data-step="3" style="display: none;">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Language Proficiency</h3>
            
            <!-- First Official Language -->
            <div class="form-group mb-8">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">First Official Language (English or French)</h4>
              
              <!-- Language Test Type -->
              <div class="form-group mb-4">
                <label class="form-label" for="first-language-test">
                  <span class="label-text">Language Test</span>
                  <span class="label-required">*</span>
                </label>
                <select id="first-language-test" name="first-language-test" class="form-input">
                  <option value="">Select your language test</option>
                  <option value="IELTS">IELTS General Training</option>
                  <option value="CELPIP">CELPIP-General</option>
                  <option value="PTE">PTE Core</option>
                  <option value="TEF">TEF Canada (French)</option>
                  <option value="TCF">TCF Canada (French)</option>
                </select>
              </div>

              <!-- TEF Info Note (Hidden by default) -->
              <div id="first-tef-info" class="form-group mb-4" style="display: none !important;">
                <div class="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                  <div class="flex items-center">
                    <span class="text-blue-600 dark:text-blue-400 mr-2">‚ÑπÔ∏è</span>
                    <div class="text-sm text-blue-700 dark:text-blue-300">
                      <strong>TEF Canada:</strong> Using current scoring system (valid for tests taken after December 10, 2023)
                    </div>
                  </div>
                </div>
              </div>

              <!-- Language Skills Score Inputs -->
              <div id="first-language-scores" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" style="display: none;">
                <div class="form-group">
                  <label class="form-label" for="first-speaking-score">
                    <span class="label-text">üó£Ô∏è Speaking Score</span>
                    <span class="label-required">*</span>
                  </label>
                  <input type="number" id="first-speaking-score" name="first-speaking-score" class="form-input" placeholder="Enter your score" step="0.1">
                  <div class="mt-2 p-2 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700" style="display: none;">
                    <div class="text-sm font-semibold text-green-700 dark:text-green-300 flex justify-between items-center">
                      <span>CLB Level: <span class="clb-result">-</span></span>
                      <span class="text-blue-600 dark:text-blue-400">Points: <strong class="points-value">0</strong></span>
                    </div>
                  </div>
                </div>

                <div class="form-group">
                  <label class="form-label" for="first-listening-score">
                    <span class="label-text">üëÇ Listening Score</span>
                    <span class="label-required">*</span>
                  </label>
                  <input type="number" id="first-listening-score" name="first-listening-score" class="form-input" placeholder="Enter your score" step="0.1">
                  <div class="mt-2 p-2 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700" style="display: none;">
                    <div class="text-sm font-semibold text-green-700 dark:text-green-300 flex justify-between items-center">
                      <span>CLB Level: <span class="clb-result">-</span></span>
                      <span class="text-blue-600 dark:text-blue-400">Points: <strong class="points-value">0</strong></span>
                    </div>
                  </div>
                </div>

                <div class="form-group">
                  <label class="form-label" for="first-reading-score">
                    <span class="label-text">üìñ Reading Score</span>
                    <span class="label-required">*</span>
                  </label>
                  <input type="number" id="first-reading-score" name="first-reading-score" class="form-input" placeholder="Enter your score" step="0.1">
                  <div class="mt-2 p-2 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700" style="display: none;">
                    <div class="text-sm font-semibold text-green-700 dark:text-green-300 flex justify-between items-center">
                      <span>CLB Level: <span class="clb-result">-</span></span>
                      <span class="text-blue-600 dark:text-blue-400">Points: <strong class="points-value">0</strong></span>
                    </div>
                  </div>
                </div>

                <div class="form-group">
                  <label class="form-label" for="first-writing-score">
                    <span class="label-text">‚úçÔ∏è Writing Score</span>
                    <span class="label-required">*</span>
                  </label>
                  <input type="number" id="first-writing-score" name="first-writing-score" class="form-input" placeholder="Enter your score" step="0.1">
                  <div class="mt-2 p-2 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700" style="display: none;">
                    <div class="text-sm font-semibold text-green-700 dark:text-green-300 flex justify-between items-center">
                      <span>CLB Level: <span class="clb-result">-</span></span>
                      <span class="text-blue-600 dark:text-blue-400">Points: <strong class="points-value">0</strong></span>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Hidden CLB selects and points displays for compatibility -->
              <div style="display: none;">
                <select id="speaking" name="speaking"></select>
                <select id="listening" name="listening"></select>
                <select id="reading" name="reading"></select>
                <select id="writing" name="writing"></select>
                
                <!-- Hidden points displays that the total calculation system uses -->
                <div id="speaking-points" class="points-display">
                    <span class="points-text">Points: <strong class="points-value">0</strong></span>
                  </div>
                <div id="listening-points" class="points-display">
                  <span class="points-text">Points: <strong class="points-value">0</strong></span>
                </div>
                <div id="reading-points" class="points-display">
                  <span class="points-text">Points: <strong class="points-value">0</strong></span>
                </div>
                <div id="writing-points" class="points-display">
                  <span class="points-text">Points: <strong class="points-value">0</strong></span>
                </div>
              </div>

              <div id="first-language-total" class="points-summary mt-4" style="display: none;">
                <span class="text-lg font-semibold text-gray-900 dark:text-white">
                  First Language Total: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong> points
                </span>
              </div>
            </div>

            <!-- Second Official Language -->
            <div class="form-group">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Second Official Language (Optional)</h4>
              
              <div class="form-group mb-4">
                <label class="radio-option">
                  <input type="checkbox" id="has-second-language" name="has-second-language" class="checkbox-input">
                  <span class="checkbox-label">I have taken a second official language test</span>
                </label>
                <div class="form-help">Taking both English and French tests can give you bonus points</div>
              </div>

              <div id="second-language-section" style="display: none;">
                <!-- Language Type Selection -->
                <div class="form-group mb-4">
                  <label class="form-label" for="second-language-type">
                    <span class="label-text">Second Language Type</span>
                  </label>
                  <select id="second-language-type" name="second-language-type" class="form-input">
                    <option value="">Select language type</option>
                    <option value="english">English (if French is first language)</option>
                    <option value="french">French (if English is first language)</option>
                  </select>
                </div>

                <!-- Second Language Skills Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div class="form-group">
                    <label class="form-label" for="second-speaking">
                      <span class="label-text">Speaking</span>
                    </label>
                    <select id="second-speaking" name="second-speaking" class="form-input">
                      <option value="">Select level</option>
                      <option value="CLB_4_or_less">CLB/NCLC 4 or less</option>
                      <option value="CLB_5_or_6">CLB/NCLC 5-6</option>
                      <option value="CLB_7_or_8">CLB/NCLC 7-8</option>
                      <option value="CLB_9_or_more">CLB/NCLC 9+</option>
                    </select>
                  </div>

                  <div class="form-group">
                    <label class="form-label" for="second-listening">
                      <span class="label-text">Listening</span>
                    </label>
                    <select id="second-listening" name="second-listening" class="form-input">
                      <option value="">Select level</option>
                      <option value="CLB_4_or_less">CLB/NCLC 4 or less</option>
                      <option value="CLB_5_or_6">CLB/NCLC 5-6</option>
                      <option value="CLB_7_or_8">CLB/NCLC 7-8</option>
                      <option value="CLB_9_or_more">CLB/NCLC 9+</option>
                    </select>
                  </div>

                  <div class="form-group">
                    <label class="form-label" for="second-reading">
                      <span class="label-text">Reading</span>
                    </label>
                    <select id="second-reading" name="second-reading" class="form-input">
                      <option value="">Select level</option>
                      <option value="CLB_4_or_less">CLB/NCLC 4 or less</option>
                      <option value="CLB_5_or_6">CLB/NCLC 5-6</option>
                      <option value="CLB_7_or_8">CLB/NCLC 7-8</option>
                      <option value="CLB_9_or_more">CLB/NCLC 9+</option>
                    </select>
                  </div>

                  <div class="form-group">
                    <label class="form-label" for="second-writing">
                      <span class="label-text">Writing</span>
                    </label>
                    <select id="second-writing" name="second-writing" class="form-input">
                      <option value="">Select level</option>
                      <option value="CLB_4_or_less">CLB/NCLC 4 or less</option>
                      <option value="CLB_5_or_6">CLB/NCLC 5-6</option>
                      <option value="CLB_7_or_8">CLB/NCLC 7-8</option>
                      <option value="CLB_9_or_more">CLB/NCLC 9+</option>
                    </select>
                  </div>
                </div>

                <div id="second-language-total" class="points-summary mt-4" style="display: none;">
                  <span class="text-lg font-semibold text-gray-900 dark:text-white">
                    Second Language Total: <strong class="text-green-600 dark:text-green-400 points-value">0</strong> points
                  </span>
                </div>

                <div id="french-additional-points" class="points-summary mt-4" style="display: none;">
                  <span class="text-lg font-semibold text-gray-900 dark:text-white">
                    French Additional Points: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong> points
                  </span>
                  <div class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    Bonus points for French proficiency (included in Additional Factors)
                  </div>
                </div>
              </div>
            </div>

                    <!-- Language Test Info (Simplified) -->
        <div class="text-xs text-gray-500 dark:text-gray-400 mt-4">
          üí° Minimum CLB 7 required ‚Ä¢ Test results valid for 2 years
        </div>
          </div>

          <div class="calculator-step" data-step="4" style="display: none;">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Work Experience</h3>
            
            <!-- Canadian Work Experience -->
            <div class="form-group mb-8">
              <label class="form-label" for="canadian-experience">
                <span class="label-text">Canadian Work Experience</span>
                <span class="label-required">*</span>
              </label>
              <select id="canadian-experience" name="canadian-experience" class="form-input">
                <option value="">Select your Canadian work experience</option>
                <option value="none">No Canadian work experience</option>
                <option value="less_than_1_year">Less than 1 year</option>
                <option value="1_year">1 year</option>
                <option value="2_years">2 years</option>
                <option value="3_years">3 years</option>
                <option value="4_years">4 years</option>
                <option value="5_or_more_years">5 or more years</option>
              </select>
              <div class="form-help">Full-time work experience in Canada (NOC TEER 0, 1, 2, or 3)</div>
              <div id="canadian-experience-points" class="points-display" style="display: none;">
                <span class="points-text">Points: <strong class="points-value">0</strong></span>
              </div>
            </div>

            <!-- Foreign Work Experience -->
            <div class="form-group mb-8">
              <label class="form-label" for="foreign-experience">
                <span class="label-text">Foreign Work Experience</span>
                <span class="label-required">*</span>
              </label>
              <select id="foreign-experience" name="foreign-experience" class="form-input">
                <option value="">Select your foreign work experience</option>
                <option value="none">No foreign work experience</option>
                <option value="less_than_1_year">Less than 1 year</option>
                <option value="1_year">1 year</option>
                <option value="2_years">2 years</option>
                <option value="3_or_more_years">3 or more years</option>
              </select>
              <div class="form-help">Full-time work experience outside Canada in your primary occupation</div>
              <div id="foreign-experience-points" class="points-display" style="display: none;">
                <span class="points-text">Points: <strong class="points-value">0</strong></span>
              </div>
            </div>

            <!-- Certificate of Qualification (Trade Certificate) -->
            <div class="form-group mb-8">
              <label class="form-label" for="trade-certificate">
                <span class="label-text">Certificate of Qualification (Trade Certificate)</span>
              </label>
              <select id="trade-certificate" name="trade-certificate" class="form-input">
                <option value="">Select if you have a trade certificate</option>
                <option value="none">No certificate of qualification</option>
                <option value="has_certificate">Yes, I have a certificate of qualification</option>
              </select>
              <div class="form-help">Provincial/territorial certificate of qualification in a skilled trade</div>
            </div>

            <!-- Work Experience Total (Canadian + Foreign only) -->
            <div id="work-experience-total" class="points-summary mt-6" style="display: none;">
              <span class="text-lg font-semibold text-gray-900 dark:text-white">
                Work Experience Total: <strong class="text-orange-600 dark:text-orange-400 points-value">0</strong> points
              </span>
              <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                Canadian work experience + Foreign work experience
              </div>
            </div>

            <!-- Skill Transferability Total (separate from work experience) -->
            <div id="transferability-total" class="points-summary mt-6" style="display: none;">
              <span class="text-lg font-semibold text-gray-900 dark:text-white">
                Skill Transferability Bonus: <strong class="text-purple-600 dark:text-purple-400 points-value">0</strong> points
              </span>
              <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                Education+Language, Experience+Language, and other combinations
              </div>
            </div>

            <!-- Experience Info -->
            <div class="text-xs text-gray-500 dark:text-gray-400 mt-4">
              üí° Must be paid, full-time (30+ hrs/week), continuous work in NOC TEER 0, 1, 2, or 3<br/>
              üéØ <strong>Bonus Points:</strong> Education+Experience, Language+Experience, Foreign+Canadian combinations can add 50+ points!
            </div>
          </div>

          <div class="calculator-step" data-step="5" style="display: none;">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Spouse Information</h3>
            
            <div class="text-center text-gray-500 dark:text-gray-400 mb-8">
              üí° Complete this section only if you're married/common-law and your spouse will accompany you to Canada
            </div>

            <!-- Spouse Education -->
            <div class="form-group mb-8">
              <label class="form-label" for="spouse-education">
                <span class="label-text">Spouse's Highest Level of Education</span>
              </label>
              <select id="spouse-education" name="spouse-education" class="form-input">
                <option value="">Select spouse's education level</option>
                <option value="less_than_secondary">Less than secondary school</option>
                <option value="secondary_diploma">Secondary diploma (high school graduation)</option>
                <option value="one_year_post_secondary">One-year degree, diploma or certificate</option>
                <option value="two_year_post_secondary">Two-year program at university, college, trade or technical school</option>
                <option value="bachelors_or_three_year_post_secondary">Bachelor's degree OR three or more year program</option>
                <option value="two_or_more_post_secondary_one_at_least_three_years">Two or more certificates, diplomas, or degrees (one must be 3+ years)</option>
                <option value="masters_or_professional_degree">Master's degree, or professional degree needed to practice</option>
                <option value="doctoral">Doctoral level university degree (PhD)</option>
              </select>
              <div class="form-help">Must have Educational Credential Assessment (ECA) for foreign education</div>
              
              <div id="spouse-education-points" class="points-display" style="display: none;">
                <span class="points-text">Education Points: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong></span>
              </div>
            </div>

            <!-- Spouse Language Proficiency -->
            <div class="form-group mb-8">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Spouse's Language Proficiency</h4>
              


              <!-- Spouse Language Skills Grid -->
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div class="form-group">
                  <label class="form-label" for="spouse-speaking">
                    <span class="label-text">Speaking</span>
                  </label>
                  <select id="spouse-speaking" name="spouse-speaking" class="form-input">
                    <option value="">Select CLB level</option>
                    <option value="CLB_4_or_less">CLB 4 or less</option>
                    <option value="CLB_5">CLB 5</option>
                    <option value="CLB_6">CLB 6</option>
                    <option value="CLB_7">CLB 7</option>
                    <option value="CLB_8">CLB 8</option>
                    <option value="CLB_9">CLB 9</option>
                    <option value="CLB_10_or_more">CLB 10+</option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label" for="spouse-listening">
                    <span class="label-text">Listening</span>
                  </label>
                  <select id="spouse-listening" name="spouse-listening" class="form-input">
                    <option value="">Select CLB level</option>
                    <option value="CLB_4_or_less">CLB 4 or less</option>
                    <option value="CLB_5">CLB 5</option>
                    <option value="CLB_6">CLB 6</option>
                    <option value="CLB_7">CLB 7</option>
                    <option value="CLB_8">CLB 8</option>
                    <option value="CLB_9">CLB 9</option>
                    <option value="CLB_10_or_more">CLB 10+</option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label" for="spouse-reading">
                    <span class="label-text">Reading</span>
                  </label>
                  <select id="spouse-reading" name="spouse-reading" class="form-input">
                    <option value="">Select CLB level</option>
                    <option value="CLB_4_or_less">CLB 4 or less</option>
                    <option value="CLB_5">CLB 5</option>
                    <option value="CLB_6">CLB 6</option>
                    <option value="CLB_7">CLB 7</option>
                    <option value="CLB_8">CLB 8</option>
                    <option value="CLB_9">CLB 9</option>
                    <option value="CLB_10_or_more">CLB 10+</option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label" for="spouse-writing">
                    <span class="label-text">Writing</span>
                  </label>
                  <select id="spouse-writing" name="spouse-writing" class="form-input">
                    <option value="">Select CLB level</option>
                    <option value="CLB_4_or_less">CLB 4 or less</option>
                    <option value="CLB_5">CLB 5</option>
                    <option value="CLB_6">CLB 6</option>
                    <option value="CLB_7">CLB 7</option>
                    <option value="CLB_8">CLB 8</option>
                    <option value="CLB_9">CLB 9</option>
                    <option value="CLB_10_or_more">CLB 10+</option>
                  </select>
                </div>
              </div>

              <div id="spouse-language-points" class="points-display" style="display: none;">
                <span class="points-text">Language Points: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong></span>
              </div>
            </div>

            <!-- Spouse Canadian Work Experience -->
            <div class="form-group mb-8">
              <label class="form-label" for="spouse-canadian-experience">
                <span class="label-text">Spouse's Canadian Work Experience</span>
              </label>
              <select id="spouse-canadian-experience" name="spouse-canadian-experience" class="form-input">
                <option value="">Select spouse's Canadian work experience</option>
                <option value="none">No Canadian work experience</option>
                <option value="less_than_1_year">Less than 1 year</option>
                <option value="1_year">1 year</option>
                <option value="2_years">2 years</option>
                <option value="3_years">3 years</option>
                <option value="4_years">4 years</option>
                <option value="5_or_more_years">5 or more years</option>
              </select>
              <div class="form-help">Must be skilled work experience (NOC TEER 0, 1, 2, or 3)</div>
              
              <div id="spouse-work-points" class="points-display" style="display: none;">
                <span class="points-text">Work Experience Points: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong></span>
              </div>
            </div>

            <div id="spouse-total" class="points-summary mt-6">
              <span class="text-xl font-semibold text-gray-900 dark:text-white">
                Spouse Total: <strong class="text-green-600 dark:text-green-400 points-value">0</strong> points
              </span>
            </div>
          </div>

          <div class="calculator-step" data-step="6" style="display: none;">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Additional Factors</h3>
            
            <div class="text-center text-gray-500 dark:text-gray-400 mb-8">
              üéØ These factors can significantly boost your CRS score!
            </div>

            <!-- Sibling in Canada -->
            <div class="form-group mb-8">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Sibling in Canada</h4>
              <div class="radio-group">
                <label class="radio-option">
                  <input type="radio" name="sibling-canada" value="yes" class="radio-input">
                  <span class="radio-label">Yes, I have a sibling who is a Canadian citizen or permanent resident</span>
                </label>
                <label class="radio-option">
                  <input type="radio" name="sibling-canada" value="no" class="radio-input" checked>
                  <span class="radio-label">No sibling in Canada</span>
                </label>
              </div>
              <div class="form-help">Sibling must be 18+ years old and living in Canada</div>
              
              <div id="sibling-points" class="points-display" style="display: none;">
                <span class="points-text">Sibling Points: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong></span>
              </div>
            </div>



            <!-- Canadian Education -->
            <div class="form-group mb-8">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Canadian Education</h4>
              <div class="form-group">
                <label class="form-label" for="canadian-education">
                  <span class="label-text">Post-Secondary Education in Canada</span>
                </label>
                <select id="canadian-education" name="canadian-education" class="form-input">
                  <option value="">Select Canadian education</option>
                  <option value="none">No Canadian post-secondary education</option>
                  <option value="one_or_two_year">1-2 year credential from Canadian post-secondary institution</option>
                  <option value="three_year_or_more">3+ year credential from Canadian post-secondary institution</option>
                </select>
                <div class="form-help">Must be from a Canadian post-secondary institution</div>
              </div>
              
              <div id="canadian-education-points" class="points-display" style="display: none;">
                <span class="points-text">Canadian Education Points: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong></span>
              </div>
            </div>



            <!-- Provincial Nomination -->
            <div class="form-group mb-8">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Provincial Nomination</h4>
              <div class="radio-group">
                <label class="radio-option">
                  <input type="radio" name="provincial-nomination" value="yes" class="radio-input">
                  <span class="radio-label">Yes, I have a provincial nomination certificate</span>
                </label>
                <label class="radio-option">
                  <input type="radio" name="provincial-nomination" value="no" class="radio-input" checked>
                  <span class="radio-label">No provincial nomination</span>
                </label>
              </div>
              <div class="form-help">Provincial Nominee Program (PNP) certificate from a Canadian province or territory</div>
              
              <div id="pnp-points" class="points-display" style="display: none;">
                <span class="points-text">PNP Points: <strong class="text-blue-600 dark:text-blue-400 points-value">0</strong></span>
              </div>
            </div>

            <div id="additional-total" class="points-summary mt-6">
              <span class="text-xl font-semibold text-gray-900 dark:text-white">
                Additional Factors Total: <strong class="text-green-600 dark:text-green-400 points-value">0</strong> points
              </span>
            </div>
          </div>

          <!-- Navigation Buttons -->
          <div class="flex justify-between items-center pt-8 border-t border-gray-200 dark:border-gray-700">
            <button type="button" id="prev-btn" class="btn-secondary" style="display: none;">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Previous
            </button>
            
            <div class="flex-1"></div>
            
            <button type="button" id="next-btn" class="btn-primary">
              Next
              <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
            
            <button type="button" id="calculate-btn" class="btn-primary" style="display: none;">
              üìä Generate Report
            </button>
          </div>

        </form>

        <!-- Results Section -->
        <div id="results-section" class="mt-12" style="display: none;">
          <!-- Header with Actions -->
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8 gap-4">
            <div>
              <h2 class="text-3xl font-bold text-gray-900 dark:text-white">Your CRS Assessment Results</h2>
              <p class="text-gray-600 dark:text-gray-400 mt-2">Comprehensive breakdown of your Express Entry score</p>
            </div>
            <div class="flex gap-3">
              <button id="print-btn" class="btn-secondary flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
                </svg>
                Print
              </button>
              <button id="download-pdf-btn" class="btn-secondary flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Download PDF
              </button>
              <button id="download-csv-btn" class="btn-secondary flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export CSV
              </button>
            </div>
          </div>

          <!-- Main Score Card -->
          <div class="bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-2xl p-8 border border-blue-200 dark:border-blue-700 mb-8">
            <div class="text-center mb-8">
              <h3 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">Your CRS Score</h3>
              <div class="text-6xl font-bold text-blue-600 dark:text-blue-400 mb-2" id="final-total-score">0</div>
              <div class="text-lg text-gray-600 dark:text-gray-300">out of 1,200 points</div>
              
              <!-- Score Status -->
              <div id="score-status" class="mt-6 p-4 rounded-xl">
                <!-- Will be populated with competitive status -->
              </div>
            </div>
            
            <!-- Score Breakdown -->
            <div id="detailed-breakdown" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <!-- Will be populated with detailed breakdown -->
            </div>
          </div>

          <!-- Live Draw Comparison -->
          <div id="draw-comparison" class="bg-white dark:bg-gray-800 rounded-2xl p-8 border border-gray-200 dark:border-gray-700 mb-8">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
              <span class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
              Latest Express Entry Draw Comparison
            </h3>
            <div id="draw-comparison-content">
              <!-- Will be populated with live draw data -->
            </div>
          </div>

          <!-- Assessment CTA -->
          <div class="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 rounded-2xl p-8 border border-green-200 dark:border-green-700 text-center">
            <div class="max-w-3xl mx-auto">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                üéØ Get Your Complete Immigration Assessment
              </h3>
              <p class="text-lg text-gray-600 dark:text-gray-400 mb-6">
                Discover your eligibility for <strong>35+ immigration programs</strong> including Provincial Nominee Programs, 
                Federal programs, and specialized streams. Get personalized recommendations and next steps.
              </p>
              <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
                <button class="btn-primary text-lg px-8 py-4">
                  üöÄ Get Free Complete Assessment
                </button>
                <div class="text-sm text-gray-500 dark:text-gray-400">
                  ‚úì 35+ Programs ‚Ä¢ ‚úì Instantly ‚Ä¢ ‚úì 100% Free
                </div>
              </div>
            </div>
          </div>

          <!-- New Calculation Button -->
          <div class="text-center mt-8">
            <button id="new-calculation-btn" class="btn-secondary">
              üîÑ Calculate Another Score
            </button>
          </div>
        </div>

      </div>
    </div>
  </section>

  <!-- FSW Calculator Section -->
  <section id="fsw-calculator" class="py-16 bg-white dark:bg-gray-800" style="display: none;">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Calculator Header -->
      <div class="text-center mb-12">
        <div class="inline-flex items-center gap-3 mb-4">
          <div class="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center">
            <span class="text-2xl">üåç</span>
          </div>
          <h2 class="text-3xl font-bold text-gray-900 dark:text-white">FSW Points Calculator</h2>
        </div>
        <p class="text-lg text-gray-600 dark:text-gray-300 mb-6">
          Calculate your Federal Skilled Worker eligibility points
        </p>
      </div>

      <!-- FSW Calculator Form -->
      <div class="bg-gray-50 dark:bg-gray-900 rounded-2xl p-8 shadow-inner">
        
        <!-- Progress Bar -->
        <div class="bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-4">
          <div id="fsw-progress-bar" class="bg-gradient-to-r from-green-500 to-emerald-600 h-2 rounded-full transition-all duration-300" style="width: 16.67%"></div>
        </div>
        <div class="text-sm text-gray-500 dark:text-gray-400 mb-6">
          <span id="fsw-progress-text">Step 1 of 6</span>
        </div>
        
        <!-- Total Score Display -->
        <div id="fsw-total-score-display" class="mb-8 text-center bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-6 border border-green-200 dark:border-green-700">
          <div class="text-sm text-gray-600 dark:text-gray-400 mb-1">Current FSW Score</div>
          <div class="text-4xl font-bold text-green-600 dark:text-green-400">
            <span id="fsw-total-score-value">0</span>
          </div>
          <div class="text-xs text-gray-500 dark:text-gray-400 mb-2">out of 100 maximum</div>
          <div id="fsw-eligibility-status" class="text-sm font-medium">
            <span class="text-red-600 dark:text-red-400">‚ùå Below minimum (67 points required)</span>
          </div>
        </div>

        <!-- Step Indicator -->
        <div class="flex justify-center mb-8 overflow-x-auto">
          <div class="flex items-center space-x-2 sm:space-x-4 min-w-max px-4">
            <div class="fsw-step-indicator active" data-step="1">
              <span class="step-number">1</span>
              <span class="step-label">Language</span>
            </div>
            <div class="step-line"></div>
            <div class="fsw-step-indicator" data-step="2">
              <span class="step-number">2</span>
              <span class="step-label">Education</span>
            </div>
            <div class="step-line"></div>
            <div class="fsw-step-indicator" data-step="3">
              <span class="step-number">3</span>
              <span class="step-label">Work</span>
            </div>
            <div class="step-line"></div>
            <div class="fsw-step-indicator" data-step="4">
              <span class="step-number">4</span>
              <span class="step-label">Age</span>
            </div>
            <div class="step-line"></div>
            <div class="fsw-step-indicator" data-step="5">
              <span class="step-number">5</span>
              <span class="step-label">Job Offer</span>
            </div>
            <div class="step-line"></div>
            <div class="fsw-step-indicator" data-step="6">
              <span class="step-number">6</span>
              <span class="step-label">Adaptability</span>
            </div>
          </div>
        </div>

        <!-- FSW Calculator Steps -->
        <div id="fsw-calculator-sections">
          
          <!-- Step 1: Language Proficiency -->
          <div class="fsw-calculator-step" data-step="1" style="display: block;">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-8 border border-gray-200 dark:border-gray-700">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
                üó£Ô∏è Language Proficiency
                <span class="text-lg font-bold text-green-600 dark:text-green-400">
                  (<span id="fsw-language-points">0</span>/28 points)
                </span>
              </h3>
              
              <!-- First Official Language -->
              <div class="mb-8">
                <label class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-4">
                  First Official Language (English or French) *
                </label>
                
                <!-- Language Test Type -->
                <div class="mb-6">
                  <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Language Test Type *
                  </label>
                  <select id="fsw-language-test" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    <option value="">Select your language test</option>
                    <option value="IELTS">IELTS General Training</option>
                    <option value="CELPIP">CELPIP-General</option>
                    <option value="PTE">PTE Core</option>
                    <option value="TEF_NEW">TEF Canada (Current - after Dec 10, 2023)</option>
                    <option value="TCF">TCF Canada (French)</option>
                  </select>
                </div>

                <!-- Raw Score Inputs (Hidden by default) -->
                <div id="fsw-score-inputs" class="mb-6" style="display: none;">
                  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <div class="form-group">
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        üó£Ô∏è Speaking Score *
                      </label>
                      <input type="number" id="fsw-speaking-score" step="0.5" min="0" max="9" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="e.g. 7.5">
                      <div class="mt-1 text-xs text-green-600 dark:text-green-400" style="display: none;">
                        CLB: <span class="clb-result font-semibold">-</span> | Points: <span class="points-value font-semibold">0</span>
                      </div>
                    </div>

                    <div class="form-group">
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        üëÇ Listening Score *
                      </label>
                      <input type="number" id="fsw-listening-score" step="0.5" min="0" max="9" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="e.g. 8.0">
                      <div class="mt-1 text-xs text-green-600 dark:text-green-400" style="display: none;">
                        CLB: <span class="clb-result font-semibold">-</span> | Points: <span class="points-value font-semibold">0</span>
                      </div>
                    </div>

                    <div class="form-group">
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        üìñ Reading Score *
                      </label>
                      <input type="number" id="fsw-reading-score" step="0.5" min="0" max="9" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="e.g. 6.5">
                      <div class="mt-1 text-xs text-green-600 dark:text-green-400" style="display: none;">
                        CLB: <span class="clb-result font-semibold">-</span> | Points: <span class="points-value font-semibold">0</span>
                      </div>
                    </div>

                    <div class="form-group">
                      <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        ‚úçÔ∏è Writing Score *
                      </label>
                      <input type="number" id="fsw-writing-score" step="0.5" min="0" max="9" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500" placeholder="e.g. 7.0">
                      <div class="mt-1 text-xs text-green-600 dark:text-green-400" style="display: none;">
                        CLB: <span class="clb-result font-semibold">-</span> | Points: <span class="points-value font-semibold">0</span>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- TEF Info Note (Hidden by default) -->
                <div id="fsw-tef-info" class="mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg text-sm text-blue-800 dark:text-blue-200" style="display: none !important;">
                  <strong>TEF Canada:</strong> Using current scoring system (valid for tests taken after December 10, 2023)
                </div>

                <!-- CLB Level Dropdowns (Hidden by default, for compatibility) -->
                <div id="fsw-clb-dropdowns" style="display: none;">
                <!-- Language Skills Grid -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                  <div class="form-group">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      üó£Ô∏è Speaking *
                    </label>
                    <select id="fsw-speaking" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                      <option value="">Select CLB level</option>
                      <option value="CLB_6_or_less">CLB 6 or less (0 pts)</option>
                      <option value="CLB_7">CLB 7 (4 pts)</option>
                      <option value="CLB_8">CLB 8 (5 pts)</option>
                      <option value="CLB_9_or_higher">CLB 9+ (6 pts)</option>
                    </select>
                  </div>

                  <div class="form-group">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      üëÇ Listening *
                    </label>
                    <select id="fsw-listening" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                      <option value="">Select CLB level</option>
                      <option value="CLB_6_or_less">CLB 6 or less (0 pts)</option>
                      <option value="CLB_7">CLB 7 (4 pts)</option>
                      <option value="CLB_8">CLB 8 (5 pts)</option>
                      <option value="CLB_9_or_higher">CLB 9+ (6 pts)</option>
                    </select>
                  </div>

                  <div class="form-group">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      üìñ Reading *
                    </label>
                    <select id="fsw-reading" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                      <option value="">Select CLB level</option>
                      <option value="CLB_6_or_less">CLB 6 or less (0 pts)</option>
                      <option value="CLB_7">CLB 7 (4 pts)</option>
                      <option value="CLB_8">CLB 8 (5 pts)</option>
                      <option value="CLB_9_or_higher">CLB 9+ (6 pts)</option>
                    </select>
                  </div>

                  <div class="form-group">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      ‚úçÔ∏è Writing *
                    </label>
                    <select id="fsw-writing" class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                      <option value="">Select CLB level</option>
                      <option value="CLB_6_or_less">CLB 6 or less (0 pts)</option>
                      <option value="CLB_7">CLB 7 (4 pts)</option>
                      <option value="CLB_8">CLB 8 (5 pts)</option>
                      <option value="CLB_9_or_higher">CLB 9+ (6 pts)</option>
                    </select>
                  </div>
                </div>
                </div>

                <!-- Language Points Display -->
                <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg p-4 mb-4">
                  <div class="flex justify-between items-center text-sm">
                    <span class="font-medium text-green-800 dark:text-green-200">First Language Points:</span>
                    <span class="font-bold text-green-600 dark:text-green-400" id="fsw-first-lang-breakdown">0/24 points</span>
                  </div>
                  <div class="mt-2 text-xs text-green-700 dark:text-green-300" id="fsw-skill-breakdown">
                    Speaking: CLB - (0 pts) | Listening: CLB - (0 pts) | Reading: CLB - (0 pts) | Writing: CLB - (0 pts)
                  </div>
                </div>

                <div class="text-sm text-red-600 dark:text-red-400">
                  ‚ö†Ô∏è Minimum CLB 7 in all four skills required for FSW eligibility
                </div>
              </div>

              <!-- Second Official Language -->
              <div>
                <label class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-3">
                  Second Official Language (Optional)
                </label>
                <select id="fsw-second-language" class="w-full p-4 text-lg border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                  <option value="">No second language</option>
                  <option value="CLB_5">CLB 5 or higher (4 points)</option>
                  <option value="CLB_4">CLB 4 or lower (0 points)</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Step 2: Education -->
          <div class="fsw-calculator-step" data-step="2" style="display: none;">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-8 border border-gray-200 dark:border-gray-700">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
                üéì Education
                <span class="text-lg font-bold text-green-600 dark:text-green-400">
                  (<span id="fsw-education-points">0</span>/25 points)
                </span>
              </h3>
              
              <div>
                <label class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-3">
                  Highest Level of Education
                </label>
                <select id="fsw-education" class="w-full p-4 text-lg border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                  <option value="">Select your education level</option>
                  <option value="doctoral">Doctoral degree (PhD) - 25 points</option>
                  <option value="masters">Master's degree or professional degree - 23 points</option>
                  <option value="two_or_more">Two or more post-secondary degrees (one 3+ years) - 22 points</option>
                  <option value="bachelors">Bachelor's degree or 3+ year post-secondary - 21 points</option>
                  <option value="two_year">Two-year post-secondary diploma/certificate - 19 points</option>
                  <option value="one_year">One-year post-secondary diploma/certificate - 15 points</option>
                  <option value="secondary">Secondary school diploma - 5 points</option>
                  <option value="less_than_secondary" selected>Less than secondary school - 0 points</option>
                </select>
                <div class="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                  <div class="text-sm text-blue-600 dark:text-blue-400">
                    üí° Foreign education requires Educational Credential Assessment (ECA)
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 3: Work Experience -->
          <div class="fsw-calculator-step" data-step="3" style="display: none;">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-8 border border-gray-200 dark:border-gray-700">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
                üíº Work Experience
                <span class="text-lg font-bold text-green-600 dark:text-green-400">
                  (<span id="fsw-work-points">0</span>/15 points)
                </span>
              </h3>
              
              <div>
                <label class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-3">
                  Years of Skilled Work Experience (NOC 0, A, or B) *
                </label>
                <select id="fsw-work-experience" class="w-full p-4 text-lg border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                  <option value="less_than_1" selected>Less than 1 year - 0 points</option>
                  <option value="1">1 year - 9 points</option>
                  <option value="2-3">2-3 years - 11 points</option>
                  <option value="4-5">4-5 years - 13 points</option>
                  <option value="6_or_more">6+ years - 15 points</option>
                </select>
                <div class="mt-3 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-700">
                  <div class="text-sm text-red-600 dark:text-red-400">
                    ‚ö†Ô∏è Minimum 1 year required for FSW eligibility
                  </div>
                </div>
                <div class="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                  <div class="text-sm text-blue-600 dark:text-blue-400">
                    üí° Must be continuous, full-time (30+ hours/week) or equivalent part-time
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 4: Age -->
          <div class="fsw-calculator-step" data-step="4" style="display: none;">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-8 border border-gray-200 dark:border-gray-700">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
                üéÇ Age
                <span class="text-lg font-bold text-green-600 dark:text-green-400">
                  (<span id="fsw-age-points">0</span>/12 points)
                </span>
              </h3>
              
              <div>
                <label class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-3">
                  Your Age
                </label>
                <input type="number" id="fsw-age" min="17" max="65" placeholder="Enter your age" class="w-full p-4 text-lg border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                <div class="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                  <div class="text-sm text-blue-600 dark:text-blue-400">
                    üí° Maximum points (12) awarded for ages 18-35
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 5: Arranged Employment -->
          <div class="fsw-calculator-step" data-step="5" style="display: none;">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-8 border border-gray-200 dark:border-gray-700">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
                üíº Arranged Employment
                <span class="text-lg font-bold text-green-600 dark:text-green-400">
                  (<span id="fsw-job-points">0</span>/10 points)
                </span>
              </h3>
              
              <div>
                <label class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-3">
                  Valid Job Offer in Canada
                </label>
                <select id="fsw-job-offer" class="w-full p-4 text-lg border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-green-500 focus:border-green-500">
                  <option value="no" selected>No valid job offer - 0 points</option>
                  <option value="yes">Valid job offer (LMIA-supported) - 10 points</option>
                </select>
                <div class="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                  <div class="text-sm text-blue-600 dark:text-blue-400">
                    üí° Must be full-time, continuous, NOC 0/A/B with LMIA or LMIA-exempt
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 6: Adaptability -->
          <div class="fsw-calculator-step" data-step="6" style="display: none;">
            <div class="bg-white dark:bg-gray-800 rounded-xl p-8 border border-gray-200 dark:border-gray-700">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-3">
                üè† Adaptability
                <span class="text-lg font-bold text-green-600 dark:text-green-400">
                  (<span id="fsw-adaptability-points">0</span>/10 points)
                </span>
              </h3>
              
              <div class="space-y-6">
                <div>
                  <label class="flex items-start gap-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                    <input type="checkbox" id="fsw-canadian-work" class="mt-1 w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                    <div>
                      <div class="font-medium text-gray-900 dark:text-white">Previous work in Canada</div>
                      <div class="text-sm text-gray-600 dark:text-gray-400">At least 1 year full-time work in NOC 0, A, or B - 10 points</div>
                    </div>
                  </label>
                </div>
                
                <div>
                  <label class="flex items-start gap-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                    <input type="checkbox" id="fsw-canadian-study" class="mt-1 w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                    <div>
                      <div class="font-medium text-gray-900 dark:text-white">Previous study in Canada</div>
                      <div class="text-sm text-gray-600 dark:text-gray-400">At least 2 academic years full-time study - 5 points</div>
                    </div>
                  </label>
                </div>
                
                <div>
                  <label class="flex items-start gap-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                    <input type="checkbox" id="fsw-spouse-language" class="mt-1 w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                    <div>
                      <div class="font-medium text-gray-900 dark:text-white">Spouse language proficiency</div>
                      <div class="text-sm text-gray-600 dark:text-gray-400">Spouse has CLB 4 or higher in all four abilities - 5 points</div>
                    </div>
                  </label>
                </div>
                
                <div>
                  <label class="flex items-start gap-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                    <input type="checkbox" id="fsw-relatives" class="mt-1 w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                    <div>
                      <div class="font-medium text-gray-900 dark:text-white">Close relatives in Canada</div>
                      <div class="text-sm text-gray-600 dark:text-gray-400">Parent, grandparent, sibling, aunt, uncle, niece, nephew (citizen/PR, 19+) - 5 points</div>
                    </div>
                  </label>
                </div>
                
                <div>
                  <label class="flex items-start gap-4 p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                    <input type="checkbox" id="fsw-arranged-employment-adapt" class="mt-1 w-5 h-5 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                    <div>
                      <div class="font-medium text-gray-900 dark:text-white">Arranged employment (additional)</div>
                      <div class="text-sm text-gray-600 dark:text-gray-400">Additional points for arranged employment - 5 points</div>
                    </div>
                  </label>
                </div>
              </div>
              
              <div class="mt-6 p-4 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-700">
                <div class="text-sm text-amber-600 dark:text-amber-400">
                  üí° Maximum 10 points total regardless of combinations
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Navigation Buttons -->
        <div class="flex justify-between mt-8">
          <button id="fsw-prev-btn" class="inline-flex items-center px-6 py-3 bg-gray-600 text-white font-semibold rounded-xl hover:bg-gray-700 transition-all duration-300" style="display: none;">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Previous
          </button>
          
          <button id="fsw-next-btn" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white font-semibold rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all duration-300 ml-auto">
            Next
            <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
          
          <button id="fsw-calculate-btn" class="inline-flex items-center px-8 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white font-semibold rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl ml-auto" style="display: none;">
            üìä Generate FSW Report
            <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </button>
        </div>

      </div>

      <!-- FSW Results Section -->
      <div id="fsw-results" class="mt-12 bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-2xl p-8 border border-green-200 dark:border-green-700" style="display: none;">
        
        <!-- Results Header -->
        <div class="text-center mb-8">
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">Your FSW Assessment Results</h3>
          <p class="text-gray-600 dark:text-gray-300">Federal Skilled Worker Program Eligibility</p>
        </div>

        <!-- Action Buttons -->
        <div class="flex flex-wrap gap-4 justify-center mb-8">
          <button onclick="window.print()" class="inline-flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors">
            üñ®Ô∏è Print Report
          </button>
          <button id="fsw-download-pdf" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            üìÑ Download PDF
          </button>
          <button id="fsw-export-csv" class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            üìä Export CSV
          </button>
        </div>

        <!-- Main Score Card -->
        <div class="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-green-200 dark:border-green-700 mb-8">
          <div class="text-center">
            <div class="text-5xl font-bold text-green-600 dark:text-green-400 mb-2">
              <span id="fsw-final-score">0</span>/100
            </div>
            <div id="fsw-final-status" class="text-lg font-medium mb-4">
              <span class="text-red-600 dark:text-red-400">‚ùå Not Eligible (Need 67+ points)</span>
            </div>
            <div class="text-sm text-gray-600 dark:text-gray-400">
              Federal Skilled Worker Program Assessment
            </div>
          </div>
        </div>

        <!-- Detailed Breakdown -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8" id="fsw-detailed-breakdown">
          <!-- Breakdown items will be populated by JavaScript -->
        </div>

        <!-- Next Steps CTA -->
        <div id="fsw-next-steps-cta" class="bg-white dark:bg-gray-800 rounded-xl p-6 text-center border border-green-200 dark:border-green-700">
          <!-- CTA content will be populated by JavaScript based on eligibility -->
        </div>

      </div>

    </div>
  </section>

  <!-- OINP Calculator Section -->
  <section id="oinp-calculator" class="py-16 bg-white dark:bg-gray-800" style="display: none;">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      
      <!-- Calculator Header -->
      <div class="text-center mb-12">
        <div class="inline-flex items-center gap-3 mb-4">
          <div class="w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center">
            <span class="text-2xl">üçÅ</span>
          </div>
          <h2 class="text-3xl font-bold text-gray-900 dark:text-white">OINP Calculator</h2>
        </div>
        <p class="text-lg text-gray-600 dark:text-gray-300 mb-6">
          Calculate your Ontario Immigrant Nominee Program eligibility
        </p>
      </div>

      <!-- Coming Soon Message -->
      <div class="bg-gradient-to-r from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 rounded-2xl p-12 text-center border border-orange-200 dark:border-orange-700">
        <div class="w-20 h-20 bg-orange-500 rounded-full flex items-center justify-center mx-auto mb-6">
          <span class="text-3xl">üöÄ</span>
        </div>
        <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">Coming Soon</h3>
        <p class="text-lg text-gray-600 dark:text-gray-300 mb-6">
          We're developing comprehensive OINP calculators for all streams. 
          Start with our CRS Calculator to understand your Express Entry potential.
        </p>
        <button onclick="showCalculator('crs')" class="inline-flex items-center px-6 py-3 bg-orange-600 text-white font-semibold rounded-xl hover:bg-orange-700 transition-all duration-300">
          Try CRS Calculator
          <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
        </button>
      </div>

    </div>
  </section>

  <!-- Features Section -->
  <section class="py-16 bg-gray-50 dark:bg-gray-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">Why Use Our Calculators?</h2>
        <p class="text-lg text-gray-600 dark:text-gray-300">Built with accuracy, designed for simplicity</p>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
        <div class="text-center p-6 bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300">
          <div class="w-16 h-16 bg-blue-100 dark:bg-blue-900/20 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl">‚úÖ</span>
          </div>
          <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3">Always Updated</h3>
          <p class="text-gray-600 dark:text-gray-400">Calculations based on the latest IRCC guidelines and scoring systems</p>
        </div>
        
        <div class="text-center p-6 bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300">
          <div class="w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl">üéØ</span>
          </div>
          <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3">Precise Results</h3>
          <p class="text-gray-600 dark:text-gray-400">Detailed breakdowns and personalized recommendations for improvement</p>
        </div>
        
        <div class="text-center p-6 bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300">
          <div class="w-16 h-16 bg-purple-100 dark:bg-purple-900/20 rounded-2xl flex items-center justify-center mx-auto mb-4">
            <span class="text-2xl">üîí</span>
          </div>
          <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3">Privacy First</h3>
          <p class="text-gray-600 dark:text-gray-400">All calculations happen in your browser. No data is stored or shared</p>
        </div>
      </div>
    </div>
  </section>

</Layout>

<script define:vars={{ latestDrawData }}>
  // Inject server data
  window.latestDrawData = latestDrawData;
  console.log('Injected draw data:', latestDrawData);
</script>

<script>
  // Smooth scroll function - make it globally accessible
  window.scrollToCalculators = function() {
    console.log('scrollToCalculators called'); // Debug log
    const element = document.getElementById('calculators');
    console.log('Target element:', element); // Debug log
    if (element) {
      element.scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
      });
    } else {
      console.error('Element with id "calculators" not found');
    }
  }

  // CLB Conversion Data (from CLB Navigator)
  const clbData = {
    "IELTS": {
      "reading": [
        {"clb_level": 10, "score": 8.0},
        {"clb_level": 9, "score": 7.0},
        {"clb_level": 8, "score": 6.5},
        {"clb_level": 7, "score": 6.0},
        {"clb_level": 6, "score": 5.0},
        {"clb_level": 5, "score": 4.0},
        {"clb_level": 4, "score": 3.5},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3.0}}
      ],
      "writing": [
        {"clb_level": 10, "score": 7.5},
        {"clb_level": 9, "score": 7.0},
        {"clb_level": 8, "score": 6.5},
        {"clb_level": 7, "score": 6.0},
        {"clb_level": 6, "score": 5.5},
        {"clb_level": 5, "score": 5.0},
        {"clb_level": 4, "score": 4.0},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3.5}}
      ],
      "listening": [
        {"clb_level": 10, "score": 8.5},
        {"clb_level": 9, "score": 8.0},
        {"clb_level": 8, "score": 7.5},
        {"clb_level": 7, "score": 6.0},
        {"clb_level": 6, "score": 5.5},
        {"clb_level": 5, "score": 5.0},
        {"clb_level": 4, "score": 4.5},
        {"clb_level": 3, "score_range": {"min": 0, "max": 4.0}}
      ],
      "speaking": [
        {"clb_level": 10, "score": 7.5},
        {"clb_level": 9, "score": 7.0},
        {"clb_level": 8, "score": 6.5},
        {"clb_level": 7, "score": 6.0},
        {"clb_level": 6, "score": 5.5},
        {"clb_level": 5, "score": 5.0},
        {"clb_level": 4, "score": 4.0},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3.5}}
      ]
    },
    "CELPIP": {
      "reading": [
        {"clb_level": 10, "score": 10.0},
        {"clb_level": 9, "score": 9.0},
        {"clb_level": 8, "score": 8.0},
        {"clb_level": 7, "score": 7.0},
        {"clb_level": 6, "score": 6.0},
        {"clb_level": 5, "score": 5.0},
        {"clb_level": 4, "score": 4.0},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3.0}}
      ],
      "writing": [
        {"clb_level": 10, "score": 10.0},
        {"clb_level": 9, "score": 9.0},
        {"clb_level": 8, "score": 8.0},
        {"clb_level": 7, "score": 7.0},
        {"clb_level": 6, "score": 6.0},
        {"clb_level": 5, "score": 5.0},
        {"clb_level": 4, "score": 4.0},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3.0}}
      ],
      "listening": [
        {"clb_level": 10, "score": 10.0},
        {"clb_level": 9, "score": 9.0},
        {"clb_level": 8, "score": 8.0},
        {"clb_level": 7, "score": 7.0},
        {"clb_level": 6, "score": 6.0},
        {"clb_level": 5, "score": 5.0},
        {"clb_level": 4, "score": 4.0},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3.0}}
      ],
      "speaking": [
        {"clb_level": 10, "score": 10.0},
        {"clb_level": 9, "score": 9.0},
        {"clb_level": 8, "score": 8.0},
        {"clb_level": 7, "score": 7.0},
        {"clb_level": 6, "score": 6.0},
        {"clb_level": 5, "score": 5.0},
        {"clb_level": 4, "score": 4.0},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3.0}}
      ]
    },
    "PTE": {
      "reading": [
        {"clb_level": 10, "score_range": {"min": 88, "max": 90}},
        {"clb_level": 9, "score_range": {"min": 78, "max": 87}},
        {"clb_level": 8, "score_range": {"min": 69, "max": 77}},
        {"clb_level": 7, "score_range": {"min": 60, "max": 68}},
        {"clb_level": 6, "score_range": {"min": 51, "max": 59}},
        {"clb_level": 5, "score_range": {"min": 42, "max": 50}},
        {"clb_level": 4, "score_range": {"min": 33, "max": 41}},
        {"clb_level": 3, "score_range": {"min": 24, "max": 32}}
      ],
      "writing": [
        {"clb_level": 10, "score": 90},
        {"clb_level": 9, "score_range": {"min": 88, "max": 89}},
        {"clb_level": 8, "score_range": {"min": 79, "max": 87}},
        {"clb_level": 7, "score_range": {"min": 69, "max": 78}},
        {"clb_level": 6, "score_range": {"min": 60, "max": 68}},
        {"clb_level": 5, "score_range": {"min": 51, "max": 59}},
        {"clb_level": 4, "score_range": {"min": 41, "max": 50}},
        {"clb_level": 3, "score_range": {"min": 32, "max": 40}}
      ],
      "listening": [
        {"clb_level": 10, "score_range": {"min": 89, "max": 90}},
        {"clb_level": 9, "score_range": {"min": 82, "max": 88}},
        {"clb_level": 8, "score_range": {"min": 71, "max": 81}},
        {"clb_level": 7, "score_range": {"min": 60, "max": 70}},
        {"clb_level": 6, "score_range": {"min": 50, "max": 59}},
        {"clb_level": 5, "score_range": {"min": 39, "max": 49}},
        {"clb_level": 4, "score_range": {"min": 28, "max": 38}},
        {"clb_level": 3, "score_range": {"min": 18, "max": 27}}
      ],
      "speaking": [
        {"clb_level": 10, "score_range": {"min": 89, "max": 90}},
        {"clb_level": 9, "score_range": {"min": 84, "max": 88}},
        {"clb_level": 8, "score_range": {"min": 76, "max": 83}},
        {"clb_level": 7, "score_range": {"min": 68, "max": 75}},
        {"clb_level": 6, "score_range": {"min": 59, "max": 67}},
        {"clb_level": 5, "score_range": {"min": 51, "max": 58}},
        {"clb_level": 4, "score_range": {"min": 42, "max": 50}},
        {"clb_level": 3, "score_range": {"min": 34, "max": 41}}
      ]
    },
    "TEF_OLD": {
      "reading": [
        {"clb_level": 10, "score_range": {"min": 566, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 533, "max": 565}},
        {"clb_level": 8, "score_range": {"min": 500, "max": 532}},
        {"clb_level": 7, "score_range": {"min": 450, "max": 499}},
        {"clb_level": 6, "score_range": {"min": 400, "max": 449}},
        {"clb_level": 5, "score_range": {"min": 350, "max": 399}},
        {"clb_level": 4, "score_range": {"min": 300, "max": 349}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 299}}
      ],
      "writing": [
        {"clb_level": 10, "score_range": {"min": 566, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 533, "max": 565}},
        {"clb_level": 8, "score_range": {"min": 500, "max": 532}},
        {"clb_level": 7, "score_range": {"min": 450, "max": 499}},
        {"clb_level": 6, "score_range": {"min": 400, "max": 449}},
        {"clb_level": 5, "score_range": {"min": 350, "max": 399}},
        {"clb_level": 4, "score_range": {"min": 300, "max": 349}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 299}}
      ],
      "listening": [
        {"clb_level": 10, "score_range": {"min": 566, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 533, "max": 565}},
        {"clb_level": 8, "score_range": {"min": 500, "max": 532}},
        {"clb_level": 7, "score_range": {"min": 450, "max": 499}},
        {"clb_level": 6, "score_range": {"min": 400, "max": 449}},
        {"clb_level": 5, "score_range": {"min": 350, "max": 399}},
        {"clb_level": 4, "score_range": {"min": 300, "max": 349}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 299}}
      ],
      "speaking": [
        {"clb_level": 10, "score_range": {"min": 566, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 533, "max": 565}},
        {"clb_level": 8, "score_range": {"min": 500, "max": 532}},
        {"clb_level": 7, "score_range": {"min": 450, "max": 499}},
        {"clb_level": 6, "score_range": {"min": 400, "max": 449}},
        {"clb_level": 5, "score_range": {"min": 350, "max": 399}},
        {"clb_level": 4, "score_range": {"min": 300, "max": 349}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 299}}
      ]
    },
    "TEF_NEW": {
      "reading": [
        {"clb_level": 10, "score_range": {"min": 546, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 503, "max": 545}},
        {"clb_level": 8, "score_range": {"min": 462, "max": 502}},
        {"clb_level": 7, "score_range": {"min": 434, "max": 461}},
        {"clb_level": 6, "score_range": {"min": 393, "max": 433}},
        {"clb_level": 5, "score_range": {"min": 352, "max": 392}},
        {"clb_level": 4, "score_range": {"min": 306, "max": 351}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 305}}
      ],
      "writing": [
        {"clb_level": 10, "score_range": {"min": 558, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 512, "max": 557}},
        {"clb_level": 8, "score_range": {"min": 472, "max": 511}},
        {"clb_level": 7, "score_range": {"min": 428, "max": 471}},
        {"clb_level": 6, "score_range": {"min": 379, "max": 427}},
        {"clb_level": 5, "score_range": {"min": 330, "max": 378}},
        {"clb_level": 4, "score_range": {"min": 268, "max": 329}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 267}}
      ],
      "listening": [
        {"clb_level": 10, "score_range": {"min": 546, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 503, "max": 545}},
        {"clb_level": 8, "score_range": {"min": 462, "max": 502}},
        {"clb_level": 7, "score_range": {"min": 434, "max": 461}},
        {"clb_level": 6, "score_range": {"min": 393, "max": 433}},
        {"clb_level": 5, "score_range": {"min": 352, "max": 392}},
        {"clb_level": 4, "score_range": {"min": 306, "max": 351}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 305}}
      ],
      "speaking": [
        {"clb_level": 10, "score_range": {"min": 556, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 518, "max": 555}},
        {"clb_level": 8, "score_range": {"min": 494, "max": 517}},
        {"clb_level": 7, "score_range": {"min": 456, "max": 493}},
        {"clb_level": 6, "score_range": {"min": 422, "max": 455}},
        {"clb_level": 5, "score_range": {"min": 387, "max": 421}},
        {"clb_level": 4, "score_range": {"min": 328, "max": 386}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 327}}
      ]
    },
    "TCF": {
      "reading": [
        {"clb_level": 10, "score_range": {"min": 549, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 524, "max": 548}},
        {"clb_level": 8, "score_range": {"min": 499, "max": 523}},
        {"clb_level": 7, "score_range": {"min": 453, "max": 498}},
        {"clb_level": 6, "score_range": {"min": 406, "max": 452}},
        {"clb_level": 5, "score_range": {"min": 375, "max": 405}},
        {"clb_level": 4, "score_range": {"min": 342, "max": 374}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 341}}
      ],
      "writing": [
        {"clb_level": 10, "score_range": {"min": 16, "max": 20}},
        {"clb_level": 9, "score_range": {"min": 14, "max": 15}},
        {"clb_level": 8, "score_range": {"min": 12, "max": 13}},
        {"clb_level": 7, "score_range": {"min": 10, "max": 11}},
        {"clb_level": 6, "score_range": {"min": 7, "max": 9}},
        {"clb_level": 5, "score": 6},
        {"clb_level": 4, "score_range": {"min": 4, "max": 5}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3}}
      ],
      "listening": [
        {"clb_level": 10, "score_range": {"min": 549, "max": 699}},
        {"clb_level": 9, "score_range": {"min": 523, "max": 548}},
        {"clb_level": 8, "score_range": {"min": 503, "max": 522}},
        {"clb_level": 7, "score_range": {"min": 458, "max": 502}},
        {"clb_level": 6, "score_range": {"min": 398, "max": 457}},
        {"clb_level": 5, "score_range": {"min": 369, "max": 397}},
        {"clb_level": 4, "score_range": {"min": 331, "max": 368}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 330}}
      ],
      "speaking": [
        {"clb_level": 10, "score_range": {"min": 16, "max": 20}},
        {"clb_level": 9, "score_range": {"min": 14, "max": 15}},
        {"clb_level": 8, "score_range": {"min": 12, "max": 13}},
        {"clb_level": 7, "score_range": {"min": 10, "max": 11}},
        {"clb_level": 6, "score_range": {"min": 7, "max": 9}},
        {"clb_level": 5, "score": 6},
        {"clb_level": 4, "score_range": {"min": 4, "max": 5}},
        {"clb_level": 3, "score_range": {"min": 0, "max": 3}}
      ]
    }
  };

  // CLB Conversion Function
  function convertScoreToCLB(testType: string, skill: string, score: number, tefPeriod?: string): number {
    if (!testType || isNaN(score)) return 3;

    let testKey = testType;
    if (testType === 'TEF') {
      testKey = tefPeriod === 'old' ? 'TEF_OLD' : 'TEF_NEW';
    }

    const testData = (clbData as any)[testKey];
    if (!testData || !testData[skill]) return 3;

    const skillData = testData[skill];
    let clbLevel = 3; // Default to CLB 3

    for (const entry of skillData) {
      if (entry.score !== undefined) {
        // Exact score match
        if (score >= entry.score) {
          clbLevel = entry.clb_level;
          break;
        }
      } else if (entry.score_range) {
        // Score range match
        if (score >= entry.score_range.min && score <= entry.score_range.max) {
          clbLevel = entry.clb_level;
          break;
        }
      }
    }

    return clbLevel;
  }

  // Convert CLB level to CRS dropdown value
  function clbToCrsValue(clbLevel: number): string {
    if (clbLevel >= 10) return 'CLB_10_or_more';
    if (clbLevel === 9) return 'CLB_9';
    if (clbLevel === 8) return 'CLB_8';
    if (clbLevel === 7) return 'CLB_7';
    if (clbLevel === 6) return 'CLB_6';
    if (clbLevel >= 4) return 'CLB_4_or_5';
    return 'CLB_4_or_5'; // Default for CLB 3 and below
  }

  // Calculator functionality
  document.addEventListener('DOMContentLoaded', function() {
    let currentStep = 1;
    const totalSteps = 6;
    let selectedFirstLanguageTest: string | null = null;
    let selectedFirstTefPeriod: string | null = null;
    
    // Calculator selection
    const calculatorCards = document.querySelectorAll('.calculator-card');
    calculatorCards.forEach(card => {
      card.addEventListener('click', function(this: HTMLElement) {
        const calculatorType = this.dataset.calculator;
        showCalculator(calculatorType || 'crs');
      });
    });

    // Language Test Selection Handler
    const firstLanguageTestSelect = document.getElementById('first-language-test') as HTMLSelectElement;
    if (firstLanguageTestSelect) {
      firstLanguageTestSelect.addEventListener('change', function() {
        selectedFirstLanguageTest = this.value;
        
        // Show/hide TEF info and score sections
        const tefInfoSection = document.getElementById('first-tef-info');
        const scoresSection = document.getElementById('first-language-scores');
        
        if (selectedFirstLanguageTest === 'TEF') {
          // Show TEF info note and scores section
          if (tefInfoSection) {
            tefInfoSection.style.display = 'block';
            tefInfoSection.style.setProperty('display', 'block', 'important');
          }
          if (scoresSection) scoresSection.style.display = 'block';
          selectedFirstTefPeriod = 'new'; // Always use new TEF scoring
          setupFirstLanguageScoreInputs();
        } else if (selectedFirstLanguageTest) {
          // Hide TEF info, show scores section for other tests
          if (tefInfoSection) {
            tefInfoSection.style.display = 'none';
            tefInfoSection.style.setProperty('display', 'none', 'important');
          }
          if (scoresSection) scoresSection.style.display = 'block';
          selectedFirstTefPeriod = null;
          setupFirstLanguageScoreInputs();
        } else {
          // Hide both sections if no test selected
          if (tefInfoSection) {
            tefInfoSection.style.display = 'none';
            tefInfoSection.style.setProperty('display', 'none', 'important');
          }
          if (scoresSection) scoresSection.style.display = 'none';
          selectedFirstTefPeriod = null;
        }
        
        // Reset scores when changing test type
        resetFirstLanguageScores();
      });
    }

    // Setup score input handlers
    function setupFirstLanguageScoreInputs() {
      const scoreInputs = ['first-speaking-score', 'first-listening-score', 'first-reading-score', 'first-writing-score'];
      
      scoreInputs.forEach(inputId => {
        const input = document.getElementById(inputId) as HTMLInputElement;
        if (input) {
          input.addEventListener('input', function() {
            const skill = inputId.replace('first-', '').replace('-score', '');
            const score = parseFloat(this.value);
            
            if (!isNaN(score) && selectedFirstLanguageTest) {
              const clbLevel = convertScoreToCLB(selectedFirstLanguageTest, skill, score, selectedFirstTefPeriod || undefined);
              
              // Update CLB display
              const clbDisplay = this.parentElement?.querySelector('.clb-result');
              const clbContainer = this.parentElement?.querySelector('.mt-2') as HTMLElement;
              if (clbDisplay) clbDisplay.textContent = clbLevel.toString();
              if (clbContainer) clbContainer.style.display = 'block';
              
              // Update hidden select for compatibility with existing CRS logic
              const hiddenSelect = document.getElementById(skill) as HTMLSelectElement;
              if (hiddenSelect) {
                hiddenSelect.value = clbToCrsValue(clbLevel);
                
                // Trigger change event to update points
                const changeEvent = new Event('change', { bubbles: true });
                hiddenSelect.dispatchEvent(changeEvent);
              }
              
              // Calculate and display points in the combined CLB display
              const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
              const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
              const hasSpouse = maritalStatus === 'married' && spouseAccompanying?.value === 'yes';
              const points = getLanguagePoints(clbToCrsValue(clbLevel), hasSpouse);
              
              // Update points in the combined display
              const pointsDisplay = this.parentElement?.querySelector('.points-value');
              if (pointsDisplay) {
                pointsDisplay.textContent = points.toString();
              }
              
              // CRITICAL: Also update the hidden points display that the system uses for totals
              const hiddenPointsDisplay = document.getElementById(`${skill}-points`);
              if (hiddenPointsDisplay) {
                const hiddenPointsValue = hiddenPointsDisplay.querySelector('.points-value');
                if (hiddenPointsValue) {
                  hiddenPointsValue.textContent = points.toString();
                }
                hiddenPointsDisplay.style.display = 'block'; // Make sure it's visible to the calculation system
              }
              
              // Trigger total language calculation and CRS updates
              console.log(`BEFORE UPDATES - ${skill}: CLB ${clbLevel} = ${clbToCrsValue(clbLevel)} = ${points} points`);
              console.log('Hidden points element:', hiddenPointsDisplay);
              console.log('Hidden points value element:', hiddenPointsDisplay?.querySelector('.points-value'));
              console.log('Hidden points text content:', hiddenPointsDisplay?.querySelector('.points-value')?.textContent);
              
              updateFirstLanguageTotal();
              updateExperienceTotal(); // For transferability calculation
              updateTotalScore();
              
              console.log('AFTER UPDATES - Language total element:', document.getElementById('first-language-total'));
              console.log('Language total points:', document.querySelector('#first-language-total .points-value')?.textContent);
            } else {
              // Hide CLB display if no score
              const clbContainer = this.parentElement?.querySelector('.mt-2') as HTMLElement;
              if (clbContainer) clbContainer.style.display = 'none';
              
              // Clear points in the combined display
              const pointsDisplay = this.parentElement?.querySelector('.points-value');
              if (pointsDisplay) {
                pointsDisplay.textContent = '0';
              }
              
              // Clear hidden select
              const skill = inputId.replace('first-', '').replace('-score', '');
              const hiddenSelect = document.getElementById(skill) as HTMLSelectElement;
              if (hiddenSelect) {
                hiddenSelect.value = '';
                const changeEvent = new Event('change', { bubbles: true });
                hiddenSelect.dispatchEvent(changeEvent);
              }
              
              // CRITICAL: Also clear the hidden points display that the system uses for totals
              const hiddenPointsDisplay = document.getElementById(`${skill}-points`);
              if (hiddenPointsDisplay) {
                const hiddenPointsValue = hiddenPointsDisplay.querySelector('.points-value');
                if (hiddenPointsValue) {
                  hiddenPointsValue.textContent = '0';
                }
                hiddenPointsDisplay.style.display = 'none';
              }
              
              // Trigger total language calculation and CRS updates
              updateFirstLanguageTotal();
              updateExperienceTotal(); // For transferability calculation
              updateTotalScore();
            }
          });
        }
      });
    }

    // Reset first language scores
    function resetFirstLanguageScores() {
      const scoreInputs = ['first-speaking-score', 'first-listening-score', 'first-reading-score', 'first-writing-score'];
      
      scoreInputs.forEach(inputId => {
        const input = document.getElementById(inputId) as HTMLInputElement;
        if (input) {
          input.value = '';
          
          // Hide CLB display
          const clbContainer = input.parentElement?.querySelector('.mt-2') as HTMLElement;
          if (clbContainer) clbContainer.style.display = 'none';
        }
      });
      
      // Clear hidden selects
      const skills = ['speaking', 'listening', 'reading', 'writing'];
      skills.forEach(skill => {
        const hiddenSelect = document.getElementById(skill) as HTMLSelectElement;
        if (hiddenSelect) {
          hiddenSelect.value = '';
          const changeEvent = new Event('change', { bubbles: true });
          hiddenSelect.dispatchEvent(changeEvent);
        }
      });
    }

    // Function to show specific calculator
    function showCalculator(calculatorType: string) {
      // Hide all calculator sections
      const allCalculators = document.querySelectorAll('[id$="-calculator"]');
      allCalculators.forEach(calc => {
        (calc as HTMLElement).style.display = 'none';
      });

      // Show selected calculator
      const selectedCalc = document.getElementById(`${calculatorType}-calculator`);
      if (selectedCalc) {
        selectedCalc.style.display = 'block';
        selectedCalc.scrollIntoView({ 
          behavior: 'smooth',
          block: 'start'
        });
      }
    }

    // Make showCalculator globally available for coming soon buttons
    (window as any).showCalculator = showCalculator;
    
    // Step navigation
    const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
    const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
    const calculateBtn = document.getElementById('calculate-btn') as HTMLButtonElement;
    
    function updateStep(step: number) {
      // Check if we should skip spouse step
      const shouldSkipSpouseStep = () => {
        const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
        const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
        return maritalStatus !== 'married' || spouseAccompanying?.value !== 'yes';
      };

      // Adjust step and total steps if skipping spouse section
      let actualStep = step;
      let actualTotalSteps = totalSteps; // Always keep 6 steps for display
      
      if (shouldSkipSpouseStep()) {
        if (step > 4) {
          actualStep = step + 1; // Jump from step 4 to step 6
        }
      }

      // Hide all steps
      document.querySelectorAll('.calculator-step').forEach(s => {
        (s as HTMLElement).style.setProperty('display', 'none', 'important');
        s.classList.remove('active');
      });
      
      // Show current step
      const currentStepEl = document.querySelector(`.calculator-step[data-step="${actualStep}"]`) as HTMLElement;
      if (currentStepEl) {
        currentStepEl.style.setProperty('display', 'block', 'important');
        currentStepEl.classList.add('active');
      }
      
      // Update step indicators (show all numbers, just mark appropriately)
      document.querySelectorAll('.step-indicator').forEach((indicator, index) => {
        indicator.classList.remove('active', 'completed');
        
        // Always show all step indicators
        (indicator as HTMLElement).style.display = 'flex';
        
        // Mark step 5 as completed if skipping (so it appears "done")
        if (shouldSkipSpouseStep() && index === 4 && step > 4) { // Step 5 (index 4)
          indicator.classList.add('completed');
        } else if (index + 1 < step || (shouldSkipSpouseStep() && index === 4 && step >= 5)) {
          indicator.classList.add('completed');
        } else if (index + 1 === step) {
          indicator.classList.add('active');
        }
      });
      
      // Update progress bar
      const progressBar = document.getElementById('progress-bar');
      const progressText = document.getElementById('progress-text');
      
      // For display purposes, show the actual step we're on
      let displayStep = step;
      if (shouldSkipSpouseStep() && step > 4) {
        displayStep = 6; // We're actually on step 6 (additional factors)
      }
      
      const progress = (displayStep / totalSteps) * 100;
      if (progressBar) progressBar.style.width = `${progress}%`;
      if (progressText) progressText.textContent = `Step ${displayStep} of ${totalSteps}`;
      
      // Update buttons - use displayStep for logic
      if (prevBtn) prevBtn.style.display = step > 1 ? 'flex' : 'none';
      if (nextBtn) nextBtn.style.display = displayStep < totalSteps ? 'flex' : 'none';
      if (calculateBtn) calculateBtn.style.display = displayStep === totalSteps ? 'flex' : 'none';
    }
    
    // Navigation handled by setupNavigation() function
    
    // CRS Data embedded from JSON
    const agePoints = {
      single: { 18: 99, 19: 105, 20: 110, 21: 110, 22: 110, 23: 110, 24: 110, 25: 110, 26: 110, 27: 110, 28: 110, 29: 110, 30: 105, 31: 99, 32: 94, 33: 88, 34: 83, 35: 77, 36: 72, 37: 66, 38: 61, 39: 55, 40: 50, 41: 39, 42: 28, 43: 17, 44: 6 },
      withSpouse: { 18: 90, 19: 95, 20: 100, 21: 100, 22: 100, 23: 100, 24: 100, 25: 100, 26: 100, 27: 100, 28: 100, 29: 100, 30: 95, 31: 90, 32: 85, 33: 80, 34: 75, 35: 70, 36: 65, 37: 60, 38: 55, 39: 50, 40: 45, 41: 35, 42: 25, 43: 15, 44: 5 }
    };

    const educationPoints = {
      single: { 'less_than_secondary': 0, 'secondary_diploma': 30, 'one_year_post_secondary': 90, 'two_year_post_secondary': 98, 'bachelors_or_three_year_post_secondary': 120, 'two_or_more_post_secondary_one_at_least_three_years': 128, 'masters_or_professional_degree': 135, 'doctoral': 150 },
      withSpouse: { 'less_than_secondary': 0, 'secondary_diploma': 28, 'one_year_post_secondary': 84, 'two_year_post_secondary': 91, 'bachelors_or_three_year_post_secondary': 112, 'two_or_more_post_secondary_one_at_least_three_years': 119, 'masters_or_professional_degree': 126, 'doctoral': 140 }
    };

    const languagePoints = {
      single: { 'CLB_4_or_5': 6, 'CLB_6': 9, 'CLB_7': 17, 'CLB_8': 23, 'CLB_9': 31, 'CLB_10_or_more': 34 },
      withSpouse: { 'CLB_4_or_5': 6, 'CLB_6': 8, 'CLB_7': 16, 'CLB_8': 22, 'CLB_9': 29, 'CLB_10_or_more': 32 }
    };

    // Work Experience Points
    const experiencePoints = {
      canadian: {
        single: { none: 0, less_than_1_year: 0, "1_year": 40, "2_years": 53, "3_years": 64, "4_years": 72, "5_or_more_years": 80 },
        withSpouse: { none: 0, less_than_1_year: 0, "1_year": 35, "2_years": 46, "3_years": 56, "4_years": 63, "5_or_more_years": 70 }
      },
      foreign: {
        single: { none: 0, less_than_1_year: 0, "1_year": 13, "2_years": 25, "3_or_more_years": 37 },
        withSpouse: { none: 0, less_than_1_year: 0, "1_year": 13, "2_years": 25, "3_or_more_years": 37 }
      }
    };

    // Skill Transferability Factors (CORRECT CRS LOGIC)
    const skillTransferabilityFactors = {
      // 1. Education + Language
      educationLanguage: {
        CLB_7_or_8: {
          secondary_or_less: 0,
          one_year_post_secondary_or_more: 13,
          two_or_more_post_secondary_one_at_least_three_years_or_masters_or_doctoral: 25
        },
        CLB_9_or_more: {
          secondary_or_less: 0,
          one_year_post_secondary_or_more: 25,
          two_or_more_post_secondary_one_at_least_three_years_or_masters_or_doctoral: 50
        }
      },
      // 2. Education + Canadian Work Experience
      educationCanadianWork: {
        "1_year_canadian_work": {
          secondary_or_less: 0,
          one_year_post_secondary_or_more: 13,
          two_or_more_post_secondary_one_at_least_three_years_or_masters_or_doctoral: 25
        },
        "2_years_or_more_canadian_work": {
          secondary_or_less: 0,
          one_year_post_secondary_or_more: 25,
          two_or_more_post_secondary_one_at_least_three_years_or_masters_or_doctoral: 50
        }
      },
      // 3. Foreign Work Experience + Language
      foreignWorkLanguage: {
        CLB_7_or_8: {
          "0_years": 0,
          "1-2_years": 13,
          "3_years_or_more": 25
        },
        CLB_9_or_more: {
          "0_years": 0,
          "1-2_years": 25,
          "3_years_or_more": 50
        }
      },
      // 4. Foreign Work Experience + Canadian Work Experience
      foreignCanadianWork: {
        "1_year_canadian_work": {
          "0_years": 0,
          "1-2_years": 13,
          "3_years_or_more": 25
        },
        "2_years_or_more_canadian_work": {
          "0_years": 0,
          "1-2_years": 25,
          "3_years_or_more": 50
        }
      },
      // 5. Certificate of Qualification + Language (Trade Certificate)
      certificateLanguage: {
        CLB_5_or_6: {
          with_certificate: 25
        },
        CLB_7_or_more: {
          with_certificate: 50
        }
      }
    };

    // Spouse Points Data
    const spousePoints = {
      education: {
        'less_than_secondary': 0,
        'secondary_diploma': 2,
        'one_year_post_secondary': 6,
        'two_year_post_secondary': 7,
        'bachelors_or_three_year_post_secondary': 8,
        'two_or_more_post_secondary_one_at_least_three_years': 9,
        'masters_or_professional_degree': 10,
        'doctoral': 10
      },
      language: {
        'CLB_4_or_less': 0,
        'CLB_5': 1,
        'CLB_6': 1,
        'CLB_7': 3,
        'CLB_8': 3,
        'CLB_9': 5,
        'CLB_10_or_more': 5
      },
      canadianWork: {
        'none': 0,
        'less_than_1_year': 0,
        '1_year': 5,
        '2_years': 7,
        '3_years': 8,
        '4_years': 9,
        '5_or_more_years': 10
      }
    };

    // Additional Factors Points Data
    const additionalPoints = {
      sibling: 15,
      french: {
        // NCLC 7+ in all French skills + CLB 4 or lower in English (or no English test): 25 points
        strong_french_weak_english: 25,
        // NCLC 7+ in all French skills + CLB 5+ in all English skills: 50 points
        strong_french_strong_english: 50
      },
      canadianEducation: {
        'none': 0,
        'one_or_two_year': 15,
        'three_year_or_more': 30
      },
      provincialNomination: 600
    };

    // Calculation functions
    function getAgePoints(age: any, hasSpouse: any) {
      const data = hasSpouse ? agePoints.withSpouse : agePoints.single;
      return (data as any)[age] || 0;
    }

    function getEducationPoints(education: any, hasSpouse: any) {
      const data = hasSpouse ? educationPoints.withSpouse : educationPoints.single;
      return (data as any)[education] || 0;
    }

    function getLanguagePoints(clbLevel: any, hasSpouse: any) {
      const data = hasSpouse ? languagePoints.withSpouse : languagePoints.single;
      return (data as any)[clbLevel] || 0;
    }

    function getExperiencePoints(experience: any, type: 'canadian' | 'foreign', hasSpouse: any) {
      if (type === 'foreign') {
        // Foreign work experience has NO independent points - only contributes via skill transferability
        return 0;
      }
      const data = hasSpouse ? experiencePoints[type].withSpouse : experiencePoints[type].single;
      return (data as any)[experience] || 0;
    }

    // Calculate Skill Transferability Factors (CORRECT LOGIC)
    function calculateSkillTransferability() {
      let totalBonus = 0;
      
      // Get current values
      const education = (document.getElementById('education') as HTMLSelectElement)?.value;
      const canadianExp = (document.getElementById('canadian-experience') as HTMLSelectElement)?.value;
      const foreignExp = (document.getElementById('foreign-experience') as HTMLSelectElement)?.value;
      
      // Get language levels - use actual CLB conversion instead of broken hidden selects
      const speaking = getActualCLBLevel('speaking');
      const listening = getActualCLBLevel('listening');
      const reading = getActualCLBLevel('reading');
      const writing = getActualCLBLevel('writing');
      

      
      // Helper function to get actual CLB level from score inputs
      function getActualCLBLevel(skill: string): string {
        const scoreInput = document.getElementById(`first-${skill}-score`) as HTMLInputElement;
        const languageTest = (document.getElementById('first-language-test') as HTMLSelectElement)?.value;
        
        if (!scoreInput || !scoreInput.value || !languageTest) {
          return '';
        }
        
        const score = parseFloat(scoreInput.value);
        if (isNaN(score)) {
          return '';
        }
        
        // Convert score to CLB level using the same logic as the UI
        const clbLevel = convertScoreToCLB(languageTest, skill, score);
        
        // Convert CLB number to the format expected by transferability calculation
        return clbToCrsValue(clbLevel);
      }
      
      // Helper functions
      function getEducationLevel(edu: string) {
        if (!edu || edu === 'less_than_secondary' || edu === 'secondary_diploma') {
          return 'secondary_or_less';
        } else if (edu === 'one_year_post_secondary' || edu === 'two_year_post_secondary' || edu === 'bachelors_or_three_year_post_secondary') {
          return 'one_year_post_secondary_or_more';
        } else if (edu === 'two_or_more_post_secondary_one_at_least_three_years' || edu === 'masters_or_professional_degree' || edu === 'doctoral') {
          // Two or more post-secondary + Masters + Doctoral all get the highest points
          return 'two_or_more_post_secondary_one_at_least_three_years_or_masters_or_doctoral';
        } else {
          // Default fallback
          return 'one_year_post_secondary_or_more';
        }
      }
      
      function getLanguageLevel() {
        if (!speaking || !listening || !reading || !writing) return null;
        
        const clbLevels = [speaking, listening, reading, writing];
        const hasClb9Plus = clbLevels.every(level => level === 'CLB_9' || level === 'CLB_10_or_more');
        const hasClb7Plus = clbLevels.every(level => ['CLB_7', 'CLB_8', 'CLB_9', 'CLB_10_or_more'].includes(level));
        

        
        if (hasClb9Plus) return 'CLB_9_or_more';
        if (hasClb7Plus) return 'CLB_7_or_8';
        return null;
      }
      
      function getCanadianWorkLevel(exp: string) {
        if (!exp || exp === 'none' || exp === 'less_than_1_year') return null;
        if (exp === '1_year') return '1_year_canadian_work';
        return '2_years_or_more_canadian_work';
      }
      
      function getForeignWorkLevel(exp: string) {
        if (!exp || exp === 'none' || exp === 'less_than_1_year') return '0_years';
        if (exp === '1_year' || exp === '2_years') return '1-2_years';
        return '3_years_or_more';
      }
      
      // 1. Education + Language
      const eduLevel = getEducationLevel(education);
      const langLevel = getLanguageLevel();
      
      if (eduLevel && langLevel && skillTransferabilityFactors.educationLanguage[langLevel]) {
        const points = skillTransferabilityFactors.educationLanguage[langLevel][eduLevel] || 0;
        totalBonus += points;
      }
      
      // 2. Education + Canadian Work Experience
      const canadianWorkLevel = getCanadianWorkLevel(canadianExp);
      if (eduLevel && canadianWorkLevel && skillTransferabilityFactors.educationCanadianWork[canadianWorkLevel]) {
        totalBonus += skillTransferabilityFactors.educationCanadianWork[canadianWorkLevel][eduLevel] || 0;
      }
      
      // 3. Foreign Work Experience + Language
      const foreignWorkLevel = getForeignWorkLevel(foreignExp);
      if (langLevel && skillTransferabilityFactors.foreignWorkLanguage[langLevel]) {
        totalBonus += skillTransferabilityFactors.foreignWorkLanguage[langLevel][foreignWorkLevel] || 0;
      }
      
      // 4. Foreign Work Experience + Canadian Work Experience
      if (canadianWorkLevel && skillTransferabilityFactors.foreignCanadianWork[canadianWorkLevel]) {
        totalBonus += skillTransferabilityFactors.foreignCanadianWork[canadianWorkLevel][foreignWorkLevel] || 0;
      }
      
      // 5. Certificate of Qualification + Language (Trade Certificate)
      const tradeCertificate = (document.getElementById('trade-certificate') as HTMLSelectElement)?.value;
      if (tradeCertificate === 'has_certificate') {
        // Check if ALL four language abilities are CLB 7+
        const clbLevels = [speaking, listening, reading, writing];
        const allClb7Plus = clbLevels.every(level => ['CLB_7', 'CLB_8', 'CLB_9', 'CLB_10_or_more'].includes(level));
        
        if (allClb7Plus && skillTransferabilityFactors.certificateLanguage.CLB_7_or_more) {
          // CLB 7+ on all four abilities = 50 points
          totalBonus += skillTransferabilityFactors.certificateLanguage.CLB_7_or_more.with_certificate || 0;
        } else if (skillTransferabilityFactors.certificateLanguage.CLB_5_or_6) {
          // CLB 5+ with one or more under CLB 7 = 25 points
          totalBonus += skillTransferabilityFactors.certificateLanguage.CLB_5_or_6.with_certificate || 0;
        }
      }
      
          // Cap at 100 points maximum as per CRS rules
    return Math.min(totalBonus, 100);
  }

  // Spouse Calculation Functions
  function getSpouseEducationPoints(education: any) {
    return (spousePoints.education as any)[education] || 0;
  }

  function getSpouseLanguagePoints() {
    const speaking = (document.getElementById('spouse-speaking') as HTMLSelectElement)?.value;
    const listening = (document.getElementById('spouse-listening') as HTMLSelectElement)?.value;
    const reading = (document.getElementById('spouse-reading') as HTMLSelectElement)?.value;
    const writing = (document.getElementById('spouse-writing') as HTMLSelectElement)?.value;

    if (!speaking || !listening || !reading || !writing) return 0;

    // Calculate points for each skill and sum them
    const speakingPoints = (spousePoints.language as any)[speaking] || 0;
    const listeningPoints = (spousePoints.language as any)[listening] || 0;
    const readingPoints = (spousePoints.language as any)[reading] || 0;
    const writingPoints = (spousePoints.language as any)[writing] || 0;

    return speakingPoints + listeningPoints + readingPoints + writingPoints;
  }

  function getSpouseWorkPoints(experience: any) {
    return (spousePoints.canadianWork as any)[experience] || 0;
  }

  // Additional Factors Calculation Functions
  function getSiblingPoints() {
    const sibling = document.querySelector('input[name="sibling-canada"]:checked') as HTMLInputElement;
    return (sibling?.value === 'yes') ? additionalPoints.sibling : 0;
  }

  function getFrenchAdditionalPoints() {
    const hasSecondLanguage = (document.getElementById('has-second-language') as HTMLInputElement)?.checked;
    const secondLanguageType = (document.getElementById('second-language-type') as HTMLSelectElement)?.value;
    
    if (!hasSecondLanguage || secondLanguageType !== 'french') return 0;

    const speaking = (document.getElementById('second-speaking') as HTMLSelectElement)?.value;
    const listening = (document.getElementById('second-listening') as HTMLSelectElement)?.value;
    const reading = (document.getElementById('second-reading') as HTMLSelectElement)?.value;
    const writing = (document.getElementById('second-writing') as HTMLSelectElement)?.value;

    if (!speaking || !listening || !reading || !writing) return 0;

    // Check if all French abilities are CLB/NCLC 7+
    const allFrenchClb7Plus = [speaking, listening, reading, writing].every(level => 
      ['CLB_7_or_8', 'CLB_9_or_more'].includes(level)
    );
    
    if (!allFrenchClb7Plus) return 0;

    // Check English abilities (from main language section)
    const englishSpeaking = (document.getElementById('speaking') as HTMLSelectElement)?.value;
    const englishListening = (document.getElementById('listening') as HTMLSelectElement)?.value;
    const englishReading = (document.getElementById('reading') as HTMLSelectElement)?.value;
    const englishWriting = (document.getElementById('writing') as HTMLSelectElement)?.value;

    // Check if all English abilities are CLB 5+
    const allEnglishClb5Plus = [englishSpeaking, englishListening, englishReading, englishWriting]
      .every(level => ['CLB_5', 'CLB_6', 'CLB_7', 'CLB_8', 'CLB_9', 'CLB_10_or_more'].includes(level));

    if (allEnglishClb5Plus) {
      return additionalPoints.french.strong_french_strong_english; // 50 points
    } else {
      // CLB 4 or lower in English (or no English test)
      return additionalPoints.french.strong_french_weak_english; // 25 points
    }
  }

  function getCanadianEducationPoints(education: any) {
    return (additionalPoints.canadianEducation as any)[education] || 0;
  }



  function getProvincialNominationPoints() {
    const pnp = document.querySelector('input[name="provincial-nomination"]:checked') as HTMLInputElement;
    return (pnp?.value === 'yes') ? additionalPoints.provincialNomination : 0;
  }

    // Basic functionality for demonstration

    // Enhanced event listeners with better age calculation
    function setupAgeCalculation() {
      const ageInput = document.getElementById('age') as HTMLInputElement;
      if (ageInput) {
        ageInput.addEventListener('input', function() {
          const age = parseInt(this.value);
          const pointsDisplay = document.getElementById('age-points');
          
          if (age && age >= 18 && age <= 44 && pointsDisplay) {
            const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
            const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
            const hasSpouse = maritalStatus === 'married' && spouseAccompanying?.value === 'yes';
            const points = getAgePoints(age, hasSpouse);
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
            
            console.log(`Age: ${age}, Married: ${hasSpouse}, Points: ${points}`); // Debug log
          updateTotalScore();
          } else if (pointsDisplay) {
            pointsDisplay.style.display = 'none';
          }
        });
        
        // Also listen for change event
        ageInput.addEventListener('change', function() {
          this.dispatchEvent(new Event('input'));
        });
      }
    }
    
    // Setup education calculation
    function setupEducationCalculation() {
      const educationSelect = document.getElementById('education') as HTMLSelectElement;
      if (educationSelect) {
        educationSelect.addEventListener('change', function() {
          const education = this.value;
          const pointsDisplay = document.getElementById('education-points');
          
          if (education && pointsDisplay) {
            const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
            const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
            const hasSpouse = maritalStatus === 'married' && spouseAccompanying?.value === 'yes';
            const points = getEducationPoints(education, hasSpouse);
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
            
            console.log(`Education: ${education}, Points: ${points}`); // Debug log
            updateExperienceTotal(); // Recalculate skill transferability
            updateTotalScore();
          } else if (pointsDisplay) {
            pointsDisplay.style.display = 'none';
          }
        });
      }
    }


    
    // Setup marital status functionality
    function setupMaritalStatus() {
      const maritalSelect = document.getElementById('marital-status') as HTMLSelectElement;
      const spouseSection = document.getElementById('spouse-accompanying-section');
      
      if (maritalSelect && spouseSection) {
        maritalSelect.addEventListener('change', function() {
          const status = this.value;
          
          if (status === 'married') {
            spouseSection.style.display = 'block';
          } else {
            spouseSection.style.display = 'none';
            // Clear spouse accompanying selection when not married
            const spouseRadios = document.querySelectorAll('input[name="spouse-accompanying"]') as NodeListOf<HTMLInputElement>;
            spouseRadios.forEach(radio => radio.checked = false);
          }
          
          // Recalculate points when marital status changes
          const ageInput = document.getElementById('age') as HTMLInputElement;
          const educationSelect = document.getElementById('education') as HTMLSelectElement;
          const languageSelects = ['speaking', 'listening', 'reading', 'writing'];
          
          if (ageInput && ageInput.value) {
            ageInput.dispatchEvent(new Event('input'));
          }
          
          if (educationSelect && educationSelect.value) {
            educationSelect.dispatchEvent(new Event('change'));
          }
          
          // Recalculate language points
          languageSelects.forEach(skill => {
            const select = document.getElementById(skill) as HTMLSelectElement;
            if (select && select.value) {
              select.dispatchEvent(new Event('change'));
            }
          });
          
          // Recalculate experience points
          const canadianSelect = document.getElementById('canadian-experience') as HTMLSelectElement;
          const foreignSelect = document.getElementById('foreign-experience') as HTMLSelectElement;
          
          if (canadianSelect && canadianSelect.value) {
            canadianSelect.dispatchEvent(new Event('change'));
          }
          
          if (foreignSelect && foreignSelect.value) {
            foreignSelect.dispatchEvent(new Event('change'));
          }
          
          updateTotalScore();
        });
      }
      
      // Add spouse accompanying radio listeners
      const spouseRadios = document.querySelectorAll('input[name="spouse-accompanying"]') as NodeListOf<HTMLInputElement>;
      spouseRadios.forEach(radio => {
        radio.addEventListener('change', function() {
          // Recalculate age, education, language, and experience points when spouse accompanying changes
          const ageInput = document.getElementById('age') as HTMLInputElement;
          const educationSelect = document.getElementById('education') as HTMLSelectElement;
          const languageSelects = ['speaking', 'listening', 'reading', 'writing'];
          
          if (ageInput && ageInput.value) {
            ageInput.dispatchEvent(new Event('input'));
          }
          
          if (educationSelect && educationSelect.value) {
            educationSelect.dispatchEvent(new Event('change'));
          }
          
          // Recalculate language points
          languageSelects.forEach(skill => {
            const select = document.getElementById(skill) as HTMLSelectElement;
            if (select && select.value) {
              select.dispatchEvent(new Event('change'));
            }
          });
          
          // Recalculate experience points
          const canadianSelect = document.getElementById('canadian-experience') as HTMLSelectElement;
          const foreignSelect = document.getElementById('foreign-experience') as HTMLSelectElement;
          
          if (canadianSelect && canadianSelect.value) {
            canadianSelect.dispatchEvent(new Event('change'));
          }
          
          if (foreignSelect && foreignSelect.value) {
            foreignSelect.dispatchEvent(new Event('change'));
          }
          
          updateTotalScore();
          
          // Refresh current step to handle spouse step skipping
          updateStep(currentStep);
        });
      });
    }

    // Calculate and display total score
    function updateTotalScore() {
      const agePoints = parseInt((document.querySelector('#age-points .points-value') as HTMLElement)?.textContent || '0');
      const educationPoints = parseInt((document.querySelector('#education-points .points-value') as HTMLElement)?.textContent || '0');
      const firstLanguagePoints = parseInt((document.querySelector('#first-language-total .points-value') as HTMLElement)?.textContent || '0');
      const secondLanguagePoints = parseInt((document.querySelector('#second-language-total .points-value') as HTMLElement)?.textContent || '0');
      const workExperiencePoints = parseInt((document.querySelector('#work-experience-total .points-value') as HTMLElement)?.textContent || '0');
      const transferabilityPoints = parseInt((document.querySelector('#transferability-total .points-value') as HTMLElement)?.textContent || '0');
      const spousePoints = parseInt((document.querySelector('#spouse-total .points-value') as HTMLElement)?.textContent || '0');
      const additionalFactorsPoints = parseInt((document.querySelector('#additional-total .points-value') as HTMLElement)?.textContent || '0');
      
      const totalScore = agePoints + educationPoints + firstLanguagePoints + secondLanguagePoints + workExperiencePoints + transferabilityPoints + spousePoints + additionalFactorsPoints;
      
      // Update progress bar
      const progressBar = document.getElementById('progress-bar');
      const progressPercentage = Math.min((totalScore / 600) * 100, 100); // Max CRS is ~600
      
      if (progressBar) {
        progressBar.style.width = `${progressPercentage}%`;
      }
      
      // Update total score display
      const totalScoreDisplay = document.getElementById('total-score-display');
      const totalScoreValue = document.getElementById('total-score-value');
      
      if (totalScoreDisplay && totalScoreValue) {
        totalScoreValue.textContent = totalScore.toString();
        
        if (totalScore > 0) {
          totalScoreDisplay.style.display = 'block';
        } else {
          totalScoreDisplay.style.display = 'none';
        }
      }
      
      console.log('Total CRS Score so far:', totalScore);
    }

    // Setup step navigation
    function setupNavigation() {
      // Helper function to check if spouse step should be skipped
      const shouldSkipSpouseStep = () => {
        const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
        const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
        return maritalStatus !== 'married' || spouseAccompanying?.value !== 'yes';
      };

      // Function to validate current step before proceeding
      const validateCurrentStep = () => {
        // Special validation for Step 1: Personal Info
        if (currentStep === 1) {
          const age = (document.getElementById('age') as HTMLSelectElement)?.value;
          const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
          
          if (!age) {
            showValidationError('age', 'Please select your age.');
            return false;
          }
          
          if (!maritalStatus) {
            showValidationError('marital-status', 'Please select your marital status.');
            return false;
          }
          
          // If married, check spouse accompanying selection
          if (maritalStatus === 'married') {
            const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
            if (!spouseAccompanying) {
              showValidationError('spouse-accompanying', 'Please indicate if your spouse will accompany you to Canada.');
              return false;
            }
          }
        }

        // Special validation for Step 2: Education
        if (currentStep === 2) {
          const education = (document.getElementById('education') as HTMLSelectElement)?.value;
          
          if (!education) {
            showValidationError('education', 'Please select your highest level of education.');
            return false;
          }
        }

        // Special validation for Step 3: Language Test
        if (currentStep === 3) {
          const languageTest = (document.getElementById('first-language-test') as HTMLSelectElement)?.value;
          
          if (!languageTest) {
            showValidationError('first-language-test', 'Please select your language test type.');
            return false;
          }
          
          // Check if language scores are entered (for score-based system)
          const scoreInputs = ['first-speaking-score', 'first-listening-score', 'first-reading-score', 'first-writing-score'];
          let hasAllScores = true;
          
          for (const inputId of scoreInputs) {
            const input = document.getElementById(inputId) as HTMLInputElement;
            if (!input || !input.value || input.value.trim() === '') {
              hasAllScores = false;
              break;
            }
          }
          
          if (!hasAllScores) {
            showValidationError('first-language-scores', 'Please enter your language test scores for all four skills (Speaking, Listening, Reading, Writing).');
            return false;
          }
        }

        // Special validation for Step 4: Work Experience
        if (currentStep === 4) {
          const canadianExperience = (document.getElementById('canadian-experience') as HTMLSelectElement)?.value;
          const foreignExperience = (document.getElementById('foreign-experience') as HTMLSelectElement)?.value;
          
          if (!canadianExperience) {
            showValidationError('canadian-experience', 'Please select your Canadian work experience.');
            return false;
          }
          
          if (!foreignExperience) {
            showValidationError('foreign-experience', 'Please select your foreign work experience.');
            return false;
          }
        }

        return true;
      };

      // Function to show validation error
      const showValidationError = (fieldId: string, message: string) => {
        let targetElement: HTMLElement | null = null;

        // Find target element
        if (fieldId === 'spouse-accompanying') {
          targetElement = document.querySelector('input[name="spouse-accompanying"]')?.closest('.form-group') as HTMLElement;
        } else if (fieldId === 'first-language-scores') {
          targetElement = document.getElementById('first-language-scores');
        } else {
          targetElement = document.getElementById(fieldId);
        }

        if (targetElement) {
          // Remove existing error messages
          const existingError = targetElement.parentElement?.querySelector('.validation-error');
          if (existingError) {
            existingError.remove();
          }

          // Create and show error message
          const errorDiv = document.createElement('div');
          errorDiv.className = 'validation-error mt-2 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg text-sm text-red-600 dark:text-red-400 flex items-center';
          errorDiv.innerHTML = `<span class="mr-2">‚ö†Ô∏è</span>${message}`;
          
          // Insert error message after the field
          if (targetElement.parentElement) {
            targetElement.parentElement.insertBefore(errorDiv, targetElement.nextSibling);
          }

          // Scroll to the error
          targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
          
          // Focus the field if it's an input
          if (targetElement.tagName === 'SELECT' || targetElement.tagName === 'INPUT') {
            (targetElement as HTMLInputElement | HTMLSelectElement).focus();
          }

          // Auto-remove error after 5 seconds
          setTimeout(() => {
            if (errorDiv.parentElement) {
              errorDiv.remove();
            }
          }, 5000);
        }
      };

      if (nextBtn) {
        nextBtn.addEventListener('click', function() {
          // Validate current step before proceeding
          if (!validateCurrentStep()) {
            return; // Don't proceed if validation fails
          }
          
          let nextStep = currentStep + 1;
          
          // Skip step 5 (spouse) if not applicable
          if (shouldSkipSpouseStep() && nextStep === 5) {
            nextStep = 6;
          }
          
          const maxStep = shouldSkipSpouseStep() ? 5 : totalSteps;
          if (currentStep < maxStep) {
            currentStep = nextStep > totalSteps ? totalSteps : (shouldSkipSpouseStep() && nextStep === 6 ? 5 : nextStep);
            updateStep(currentStep);
          }
        });
      }
      
      if (prevBtn) {
        prevBtn.addEventListener('click', function() {
          let prevStep = currentStep - 1;
          
          // Skip step 5 (spouse) if not applicable when going backwards
          if (shouldSkipSpouseStep() && currentStep === 6) {
            prevStep = 4;
          }
          
          if (currentStep > 1) {
            currentStep = prevStep;
            updateStep(currentStep);
          }
        });
      }
    }

    // Setup language proficiency calculations
    function setupLanguageCalculation() {
      const languageInputs = ['speaking', 'listening', 'reading', 'writing'];
      
      languageInputs.forEach(skill => {
        const select = document.getElementById(skill) as HTMLSelectElement;
        const pointsDisplay = document.getElementById(`${skill}-points`);
        
        if (select && pointsDisplay) {
          select.addEventListener('change', function() {
            const clbLevel = this.value;
            if (clbLevel) {
              const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
              const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
              const hasSpouse = maritalStatus === 'married' && spouseAccompanying?.value === 'yes';
              const points = getLanguagePoints(clbLevel, hasSpouse);
              pointsDisplay.style.display = 'block';
              pointsDisplay.style.visibility = 'visible';
              
              const pointsValue = pointsDisplay.querySelector('.points-value');
              if (pointsValue) {
                pointsValue.textContent = points.toString();
              }
              
              updateFirstLanguageTotal();
              updateExperienceTotal(); // Recalculate skill transferability
              updateSecondLanguageTotal(); // Recalculate French additional points
              updateTotalScore();
            } else {
              pointsDisplay.style.display = 'none';
            }
          });
        }
      });
    }
    
    // Calculate first language total
    function updateFirstLanguageTotal() {
      const skills = ['speaking', 'listening', 'reading', 'writing'];
      let total = 0;
      let allFilled = true;
      
      skills.forEach(skill => {
        const pointsEl = document.querySelector(`#${skill}-points .points-value`) as HTMLElement;
        if (pointsEl && pointsEl.textContent) {
          total += parseInt(pointsEl.textContent);
        } else {
          allFilled = false;
        }
      });
      
      const totalDisplay = document.getElementById('first-language-total');
      const totalValue = totalDisplay?.querySelector('.points-value');
      
      if (totalDisplay && totalValue && allFilled) {
        totalValue.textContent = total.toString();
        totalDisplay.style.display = 'block';
      } else if (totalDisplay) {
        totalDisplay.style.display = 'none';
      }
    }

    // Setup Spouse Calculations
    function setupSpouseCalculations() {
      // Spouse Education
      const spouseEducationSelect = document.getElementById('spouse-education') as HTMLSelectElement;
      if (spouseEducationSelect) {
        spouseEducationSelect.addEventListener('change', function() {
          const education = this.value;
          const points = getSpouseEducationPoints(education);
          
          const pointsDisplay = document.getElementById('spouse-education-points');
          if (pointsDisplay) {
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
          }
          updateSpouseTotal();
        });
      }

      // Spouse Language Skills
      const spouseLanguageSkills = ['spouse-speaking', 'spouse-listening', 'spouse-reading', 'spouse-writing'];
      spouseLanguageSkills.forEach(skillId => {
        const skillSelect = document.getElementById(skillId) as HTMLSelectElement;
        if (skillSelect) {
          skillSelect.addEventListener('change', function() {
            const totalPoints = getSpouseLanguagePoints();
            
            const pointsDisplay = document.getElementById('spouse-language-points');
            if (pointsDisplay) {
              pointsDisplay.style.display = 'block';
              pointsDisplay.style.visibility = 'visible';
              
              const pointsValue = pointsDisplay.querySelector('.points-value');
              if (pointsValue) {
                pointsValue.textContent = totalPoints.toString();
              }
            }
            updateSpouseTotal();
          });
        }
      });

      // Spouse Canadian Work Experience
      const spouseWorkSelect = document.getElementById('spouse-canadian-experience') as HTMLSelectElement;
      if (spouseWorkSelect) {
        spouseWorkSelect.addEventListener('change', function() {
          const experience = this.value;
          const points = getSpouseWorkPoints(experience);
          
          const pointsDisplay = document.getElementById('spouse-work-points');
          if (pointsDisplay) {
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
          }
          updateSpouseTotal();
        });
      }
    }

    // Function to trigger default spouse calculations on page load
    function triggerDefaultSpouseCalculations() {
      // Trigger spouse education calculation for default value (Bachelor's degree)
      const spouseEducationSelect = document.getElementById('spouse-education') as HTMLSelectElement;
      if (spouseEducationSelect && spouseEducationSelect.value === 'bachelors_or_three_year_post_secondary') {
        const education = spouseEducationSelect.value;
        const points = getSpouseEducationPoints(education);
        
        const pointsDisplay = document.getElementById('spouse-education-points');
        if (pointsDisplay) {
          pointsDisplay.style.display = 'block';
          pointsDisplay.style.visibility = 'visible';
          
          const pointsValue = pointsDisplay.querySelector('.points-value');
          if (pointsValue) {
            pointsValue.textContent = points.toString();
          }
        }
      }

      // Trigger spouse language calculation for default values (CLB 6 for all skills)
      const languageSkills = ['spouse-speaking', 'spouse-listening', 'spouse-reading', 'spouse-writing'];
      languageSkills.forEach(skillId => {
        const skillSelect = document.getElementById(skillId) as HTMLSelectElement;
        if (skillSelect && skillSelect.value === 'CLB_6') {
          // Trigger change event to calculate points
          const changeEvent = new Event('change', { bubbles: true });
          skillSelect.dispatchEvent(changeEvent);
        }
      });

      // Trigger spouse work experience calculation for default value (No Canadian work experience)
      const spouseWorkSelect = document.getElementById('spouse-canadian-experience') as HTMLSelectElement;
      if (spouseWorkSelect && spouseWorkSelect.value === 'none') {
        const experience = spouseWorkSelect.value;
        const points = getSpouseWorkPoints(experience);
        
        const pointsDisplay = document.getElementById('spouse-work-points');
        if (pointsDisplay) {
          pointsDisplay.style.display = 'block';
          pointsDisplay.style.visibility = 'visible';
          
          const pointsValue = pointsDisplay.querySelector('.points-value');
          if (pointsValue) {
            pointsValue.textContent = points.toString();
          }
        }
      }

      // Update spouse total after all default calculations
      updateSpouseTotal();
    }

    function updateSpouseTotal() {
      const educationPoints = parseInt((document.querySelector('#spouse-education-points .points-value') as HTMLElement)?.textContent || '0');
      const languagePoints = parseInt((document.querySelector('#spouse-language-points .points-value') as HTMLElement)?.textContent || '0');
      const workPoints = parseInt((document.querySelector('#spouse-work-points .points-value') as HTMLElement)?.textContent || '0');
      
      const totalPoints = educationPoints + languagePoints + workPoints;
      
      const spouseTotalDisplay = document.querySelector('#spouse-total .points-value') as HTMLElement;
      if (spouseTotalDisplay) {
        spouseTotalDisplay.textContent = totalPoints.toString();
      }
      
      updateTotalScore();
    }

    // Setup Additional Factors Calculations
    function setupAdditionalFactorsCalculations() {
      // Sibling in Canada
      const siblingRadios = document.querySelectorAll('input[name="sibling-canada"]');
      siblingRadios.forEach(radio => {
        radio.addEventListener('change', function() {
          const points = getSiblingPoints();
          
          const pointsDisplay = document.getElementById('sibling-points');
          if (pointsDisplay) {
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
          }
          updateAdditionalTotal();
        });
      });

      // Canadian Education
      const canadianEducationSelect = document.getElementById('canadian-education') as HTMLSelectElement;
      if (canadianEducationSelect) {
        canadianEducationSelect.addEventListener('change', function() {
          const education = this.value;
          const points = getCanadianEducationPoints(education);
          
          const pointsDisplay = document.getElementById('canadian-education-points');
          if (pointsDisplay) {
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
          }
          updateAdditionalTotal();
        });
      }

      // Provincial Nomination
      const pnpRadios = document.querySelectorAll('input[name="provincial-nomination"]');
      pnpRadios.forEach(radio => {
        radio.addEventListener('change', function() {
          const points = getProvincialNominationPoints();
          
          const pointsDisplay = document.getElementById('pnp-points');
          if (pointsDisplay) {
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
          }
          updateAdditionalTotal();
        });
      });
    }

    function updateAdditionalTotal() {
      const siblingPoints = parseInt((document.querySelector('#sibling-points .points-value') as HTMLElement)?.textContent || '0');
      const frenchPoints = parseInt((document.querySelector('#french-additional-points .points-value') as HTMLElement)?.textContent || '0');
      const canadianEducationPoints = parseInt((document.querySelector('#canadian-education-points .points-value') as HTMLElement)?.textContent || '0');
      const pnpPoints = parseInt((document.querySelector('#pnp-points .points-value') as HTMLElement)?.textContent || '0');
      
      const totalPoints = siblingPoints + frenchPoints + canadianEducationPoints + pnpPoints;
      
      const additionalTotalDisplay = document.querySelector('#additional-total .points-value') as HTMLElement;
      if (additionalTotalDisplay) {
        additionalTotalDisplay.textContent = totalPoints.toString();
      }
      
      updateTotalScore();
    }

    // Initialize all functionality
    updateStep(currentStep);
    setupAgeCalculation();
    setupEducationCalculation();
    setupMaritalStatus();
    setupLanguageCalculation();
    setupSecondLanguage();
    setupExperienceCalculation();
    setupSpouseCalculations();
    setupAdditionalFactorsCalculations();
    setupNavigation();
    
    // Trigger default spouse calculations
    triggerDefaultSpouseCalculations();
    
    // Setup work experience calculations
    function setupExperienceCalculation() {
      const canadianSelect = document.getElementById('canadian-experience') as HTMLSelectElement;
      const foreignSelect = document.getElementById('foreign-experience') as HTMLSelectElement;
      const tradeCertificateSelect = document.getElementById('trade-certificate') as HTMLSelectElement;
      
      if (canadianSelect) {
        canadianSelect.addEventListener('change', function() {
          const experience = this.value;
          const pointsDisplay = document.getElementById('canadian-experience-points');
          
          if (experience && pointsDisplay) {
            const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
            const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
            const hasSpouse = maritalStatus === 'married' && spouseAccompanying?.value === 'yes';
            const points = getExperiencePoints(experience, 'canadian', hasSpouse);
            
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
            
            updateExperienceTotal();
            updateTotalScore();
          } else if (pointsDisplay) {
            pointsDisplay.style.display = 'none';
          }
        });
      }
      
      if (foreignSelect) {
        foreignSelect.addEventListener('change', function() {
          const experience = this.value;
          const pointsDisplay = document.getElementById('foreign-experience-points');
          
          if (experience && pointsDisplay) {
            const maritalStatus = (document.getElementById('marital-status') as HTMLSelectElement)?.value;
            const spouseAccompanying = document.querySelector('input[name="spouse-accompanying"]:checked') as HTMLInputElement;
            const hasSpouse = maritalStatus === 'married' && spouseAccompanying?.value === 'yes';
            const points = getExperiencePoints(experience, 'foreign', hasSpouse);
            
            pointsDisplay.style.display = 'block';
            pointsDisplay.style.visibility = 'visible';
            
            const pointsValue = pointsDisplay.querySelector('.points-value');
            if (pointsValue) {
              pointsValue.textContent = points.toString();
            }
            
            updateExperienceTotal();
            updateTotalScore();
          } else if (pointsDisplay) {
            pointsDisplay.style.display = 'none';
          }
        });
      }
      
      if (tradeCertificateSelect) {
        tradeCertificateSelect.addEventListener('change', function() {
          // Trade certificate doesn't give direct points, only affects skill transferability
          updateExperienceTotal();
          updateTotalScore();
        });
      }
    }
    
    // Calculate experience total and transferability separately
    function updateExperienceTotal() {
      const canadianPoints = parseInt((document.querySelector('#canadian-experience-points .points-value') as HTMLElement)?.textContent || '0');
      const foreignPoints = parseInt((document.querySelector('#foreign-experience-points .points-value') as HTMLElement)?.textContent || '0');
      
      // Calculate skill transferability bonus
      const skillBonus = calculateSkillTransferability();
      

      
      // Skill bonus calculated above, now update displays
      
      // Update separate work experience total (Canadian + Foreign only)
      const workTotal = canadianPoints + foreignPoints;
      const workTotalDisplay = document.getElementById('work-experience-total');
      const workTotalValue = workTotalDisplay?.querySelector('.points-value');
      
      if (workTotalDisplay && workTotalValue) {
        workTotalValue.textContent = workTotal.toString();
        // ALWAYS show work experience card in Step 4
        workTotalDisplay.style.display = 'block';
      }
      
      // Update separate transferability total
      const transferabilityDisplay = document.getElementById('transferability-total');
      const transferabilityValue = transferabilityDisplay?.querySelector('.points-value');
      
      if (transferabilityDisplay && transferabilityValue) {
        transferabilityValue.textContent = skillBonus.toString();
        // ALWAYS show transferability card in Step 4
        transferabilityDisplay.style.display = 'block';
      }
    }
    
    // Setup second language functionality
    function setupSecondLanguage() {
      const checkbox = document.getElementById('has-second-language') as HTMLInputElement;
      const secondLangSection = document.getElementById('second-language-section');
      
      if (checkbox && secondLangSection) {
        checkbox.addEventListener('change', function() {
          if (this.checked) {
            secondLangSection.style.display = 'block';
          } else {
            secondLangSection.style.display = 'none';
            // Clear second language selections
            const secondLangSelects = secondLangSection.querySelectorAll('select');
            secondLangSelects.forEach(select => {
              (select as HTMLSelectElement).value = '';
            });
            // Hide displays and reset values
            const secondLangTotal = document.getElementById('second-language-total');
            const frenchAdditional = document.getElementById('french-additional-points');
            if (secondLangTotal) {
              secondLangTotal.style.display = 'none';
              const pointsValue = secondLangTotal.querySelector('.points-value');
              if (pointsValue) pointsValue.textContent = '0';
            }
            if (frenchAdditional) {
              frenchAdditional.style.display = 'none';
              const pointsValue = frenchAdditional.querySelector('.points-value');
              if (pointsValue) pointsValue.textContent = '0';
            }
            updateAdditionalTotal();
            updateTotalScore();
          }
        });
      }

      // Setup second language type listener
      const languageTypeSelect = document.getElementById('second-language-type') as HTMLSelectElement;
      if (languageTypeSelect) {
        languageTypeSelect.addEventListener('change', function() {
          updateSecondLanguageTotal();
          updateAdditionalTotal();
          updateTotalScore();
        });
      }
      
      // Setup second language calculations
      const secondLanguageInputs = ['second-speaking', 'second-listening', 'second-reading', 'second-writing'];
      
      secondLanguageInputs.forEach(skill => {
        const select = document.getElementById(skill) as HTMLSelectElement;
        
        if (select) {
          select.addEventListener('change', function() {
            updateSecondLanguageTotal();
            updateAdditionalTotal(); // Update French additional points
            updateTotalScore();
          });
        }
      });
    }
    
    // Calculate second language total
    function updateSecondLanguageTotal() {
      const skills = ['second-speaking', 'second-listening', 'second-reading', 'second-writing'];
      let total = 0;
      let allFilled = true;
      
      skills.forEach(skill => {
        const select = document.getElementById(skill) as HTMLSelectElement;
        if (select && select.value) {
          // Second language points are simpler: CLB 5-6 = 1pt, CLB 7-8 = 3pts, CLB 9+ = 6pts
          const clbLevel = select.value;
          if (clbLevel === 'CLB_5_or_6') {
            total += 1;
          } else if (clbLevel === 'CLB_7_or_8') {
            total += 3;
          } else if (clbLevel === 'CLB_9_or_more') {
            total += 6;
          }
        } else {
          allFilled = false;
        }
      });
      
      const totalDisplay = document.getElementById('second-language-total');
      const totalValue = totalDisplay?.querySelector('.points-value');
      
      if (totalDisplay && totalValue && allFilled && total > 0) {
        totalValue.textContent = total.toString();
        totalDisplay.style.display = 'block';
      } else if (totalDisplay) {
        totalDisplay.style.display = 'none';
      }

      // Handle French additional points display
      const languageType = (document.getElementById('second-language-type') as HTMLSelectElement)?.value;
      const frenchAdditionalDisplay = document.getElementById('french-additional-points');
      const frenchAdditionalValue = frenchAdditionalDisplay?.querySelector('.points-value');
      
      if (languageType === 'french' && allFilled && frenchAdditionalDisplay && frenchAdditionalValue) {
        const frenchPoints = getFrenchAdditionalPoints();
        frenchAdditionalValue.textContent = frenchPoints.toString();
        frenchAdditionalDisplay.style.display = frenchPoints > 0 ? 'block' : 'none';
      } else if (frenchAdditionalDisplay) {
        frenchAdditionalDisplay.style.display = 'none';
      }
    }
    
    // Setup Calculate Button
    if (calculateBtn) {
      calculateBtn.addEventListener('click', function() {
        showResults();
      });
    }

    // Setup Results Page Actions
    function setupResultsActions() {
      // Print functionality
      const printBtn = document.getElementById('print-btn');
      if (printBtn) {
        printBtn.addEventListener('click', function() {
          window.print();
        });
      }

      // Download PDF functionality (using browser print to PDF)
      const downloadPdfBtn = document.getElementById('download-pdf-btn');
      if (downloadPdfBtn) {
        downloadPdfBtn.addEventListener('click', function() {
          // Store original title
          const originalTitle = document.title;
          
          // Update title for PDF branding
          const totalScore = parseInt((document.querySelector('#total-score .points-value') as HTMLElement)?.textContent || '0');
          document.title = `Immigratic CRS Score Report - ${totalScore} Points - ${new Date().toISOString().split('T')[0]}`;
          
          // Hide action buttons for cleaner PDF
          const actionButtons = document.querySelector('.flex.gap-3') as HTMLElement;
          if (actionButtons) actionButtons.style.display = 'none';
          
          setTimeout(() => {
            window.print();
            // Restore buttons and title after print dialog
            setTimeout(() => {
              if (actionButtons) (actionButtons as HTMLElement).style.display = 'flex';
              document.title = originalTitle;
            }, 1000);
          }, 100);
        });
      }

      // CSV Export functionality
      const downloadCsvBtn = document.getElementById('download-csv-btn');
      if (downloadCsvBtn) {
        downloadCsvBtn.addEventListener('click', function() {
          exportToCSV();
        });
      }

      // New calculation button
      const newCalcBtn = document.getElementById('new-calculation-btn');
      if (newCalcBtn) {
        newCalcBtn.addEventListener('click', function() {
          // Reset form and go back to step 1
          const form = document.getElementById('crs-calculator-form') as HTMLFormElement;
          if (form) form.reset();
          currentStep = 1;
          updateStep(currentStep);
          document.getElementById('results-section')!.style.display = 'none';
          document.getElementById('crs-calculator')!.scrollIntoView({ behavior: 'smooth' });
        });
      }
    }

    // Show Results Function
    async function showResults() {
      const resultsSection = document.getElementById('results-section');
      if (!resultsSection) return;

      // Get current total score
      const totalScore = parseInt((document.getElementById('total-score-value') as HTMLElement)?.textContent || '0');
      
      // Update final score display
      const finalScoreEl = document.getElementById('final-total-score');
      if (finalScoreEl) {
        finalScoreEl.textContent = totalScore.toString();
      }

      // Generate detailed breakdown
      generateDetailedBreakdown();
      
      // Load and display draw comparison
      await loadDrawComparison(totalScore);
      
      // Show results section
      resultsSection.style.display = 'block';
      resultsSection.scrollIntoView({ behavior: 'smooth' });
      
      // Setup action buttons
      setupResultsActions();
    }

    // Generate Detailed Breakdown
    function generateDetailedBreakdown() {
      const breakdownContainer = document.getElementById('detailed-breakdown');
      if (!breakdownContainer) return;

      const agePoints = parseInt((document.querySelector('#age-points .points-value') as HTMLElement)?.textContent || '0');
      const educationPoints = parseInt((document.querySelector('#education-points .points-value') as HTMLElement)?.textContent || '0');
      const languagePoints = parseInt((document.querySelector('#first-language-total .points-value') as HTMLElement)?.textContent || '0');
      const secondLanguagePoints = parseInt((document.querySelector('#second-language-total .points-value') as HTMLElement)?.textContent || '0');
      const workExperiencePoints = parseInt((document.querySelector('#work-experience-total .points-value') as HTMLElement)?.textContent || '0');
      const transferabilityPoints = parseInt((document.querySelector('#transferability-total .points-value') as HTMLElement)?.textContent || '0');
      const spousePoints = parseInt((document.querySelector('#spouse-total .points-value') as HTMLElement)?.textContent || '0');
      const additionalPoints = parseInt((document.querySelector('#additional-total .points-value') as HTMLElement)?.textContent || '0');

      const breakdown = [
        { category: 'Age', points: agePoints, max: 110, icon: 'üéÇ' },
        { category: 'Education', points: educationPoints, max: 150, icon: 'üéì' },
        { category: 'First Language', points: languagePoints, max: 136, icon: 'üó£Ô∏è' },
        { category: 'Second Language', points: secondLanguagePoints, max: 24, icon: 'üåê' },
        { category: 'Work Experience', points: workExperiencePoints, max: 80, icon: 'üíº' },
        { category: 'Skill Transferability', points: transferabilityPoints, max: 100, icon: 'üîÑ' },
        { category: 'Spouse Factors', points: spousePoints, max: 40, icon: 'üë•' },
        { category: 'Additional Factors', points: additionalPoints, max: 600, icon: '‚≠ê' }
      ];

      breakdownContainer.innerHTML = breakdown.map(item => `
        <div class="bg-white dark:bg-gray-700 p-6 rounded-xl border border-gray-200 dark:border-gray-600">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center gap-3">
              <span class="text-2xl">${item.icon}</span>
              <h4 class="font-semibold text-gray-900 dark:text-white">${item.category}</h4>
            </div>
            <div class="text-right">
              <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">${item.points}</div>
              <div class="text-sm text-gray-500">/ ${item.max}</div>
            </div>
          </div>
          <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
            <div class="bg-blue-600 h-2 rounded-full transition-all duration-500" style="width: ${Math.min((item.points / item.max) * 100, 100)}%"></div>
          </div>
        </div>
      `).join('');

      // Update score status
      const statusEl = document.getElementById('score-status');
      const totalScore = breakdown.reduce((sum, item) => sum + item.points, 0);
      
      if (statusEl) {
        let statusClass = '';
        let statusText = '';
        let statusIcon = '';
        
        if (totalScore >= 500) {
          statusClass = 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-300 border border-green-200 dark:border-green-700';
          statusText = 'Excellent Score! Highly Competitive';
          statusIcon = 'üéâ';
        } else if (totalScore >= 450) {
          statusClass = 'bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-300 border border-blue-200 dark:border-blue-700';
          statusText = 'Good Score! Competitive for Most Draws';
          statusIcon = 'üëç';
        } else if (totalScore >= 400) {
          statusClass = 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-300 border border-yellow-200 dark:border-yellow-700';
          statusText = 'Fair Score! Room for Improvement';
          statusIcon = '‚ö°';
        } else {
          statusClass = 'bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-300 border border-red-200 dark:border-red-700';
          statusText = 'Needs Improvement! Consider Boosting Your Score';
          statusIcon = 'üìà';
        }
        
        statusEl.className = `mt-6 p-4 rounded-xl ${statusClass}`;
        statusEl.innerHTML = `
          <div class="flex items-center justify-center gap-2 font-semibold">
            <span class="text-xl">${statusIcon}</span>
            ${statusText}
          </div>
        `;
      }
    }

    // Load Draw Comparison
    async function loadDrawComparison(userScore: number) {
      const comparisonContainer = document.getElementById('draw-comparison-content');
      if (!comparisonContainer) return;

      try {
        // Use server-side fetched data or fallback
        let latestDraw = (window as any).latestDrawData;
        
        // Debug log
        console.log('Latest draw data:', latestDraw);
        console.log('Draw data source:', latestDraw ? 'Database' : 'Fallback');
        
        if (!latestDraw || !latestDraw.crsScore) {
          latestDraw = {
            programName: "General - All Programs",
            drawDate: "January 8, 2025",
            crsScore: 470,
            invitationsIssued: 2500,
            programCode: "EE-GENERAL"
          };
        }

        const drawScore = latestDraw.crsScore;
        const scoreDiff = userScore - drawScore;
        const isAboveCutoff = scoreDiff >= 0;

        comparisonContainer.innerHTML = `
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Latest Draw Info -->
            <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
              <div class="flex items-center justify-between mb-4">
                <h4 class="text-lg font-semibold text-gray-900 dark:text-white">Latest Draw Details</h4>
                <span class="text-xs px-2 py-1 rounded-full ${latestDraw === (window as any).latestDrawData ? 'bg-green-100 text-green-700 dark:bg-green-900/20 dark:text-green-400' : 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-400'}">
                  ${latestDraw === (window as any).latestDrawData ? 'üü¢ Live Data' : '‚ö†Ô∏è Sample Data'}
                </span>
              </div>
              <div class="space-y-3">
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Draw Date:</span>
                  <span class="font-semibold text-gray-900 dark:text-white">${latestDraw.drawDate}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Program:</span>
                  <span class="font-semibold text-gray-900 dark:text-white">${latestDraw.programName}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Minimum Score:</span>
                  <span class="font-bold text-2xl text-blue-600 dark:text-blue-400">${drawScore}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600 dark:text-gray-400">Invitations Issued:</span>
                  <span class="font-semibold text-gray-900 dark:text-white">${latestDraw.invitationsIssued.toLocaleString()}</span>
                </div>
              </div>
            </div>

            <!-- Score Comparison -->
            <div class="bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Your Score Comparison</h4>
              <div class="text-center mb-4">
                <div class="text-4xl font-bold ${isAboveCutoff ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'} mb-2">
                  ${isAboveCutoff ? '+' : ''}${scoreDiff}
                </div>
                <div class="text-sm text-gray-600 dark:text-gray-400">points ${isAboveCutoff ? 'above' : 'below'} cutoff</div>
              </div>
              
              <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-4 mb-4">
                <div class="bg-gradient-to-r from-blue-500 to-purple-500 h-4 rounded-full transition-all duration-1000" 
                     style="width: ${Math.min((userScore / 600) * 100, 100)}%"></div>
              </div>
              
              <div class="p-4 rounded-lg ${isAboveCutoff ? 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-300' : 'bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-300'}">
                <div class="flex items-center gap-2 font-semibold">
                  <span class="text-xl">${isAboveCutoff ? 'üéâ' : 'üìà'}</span>
                  ${isAboveCutoff 
                    ? `Congratulations! You would have received an invitation in the latest draw!` 
                    : `You need ${Math.abs(scoreDiff)} more points to meet the latest cutoff. Consider improving your profile!`
                  }
                </div>
              </div>
            </div>
          </div>
        `;
      } catch (error) {
        console.error('Error loading draw comparison:', error);
        // Use fallback data even in error case
        const fallbackDraw = {
          programName: "General - All Programs",
          drawDate: "January 8, 2025",
          crsScore: 470,
          invitationsIssued: 2500,
          programCode: "EE-GENERAL"
        };
        
        const drawScore = fallbackDraw.crsScore;
        const scoreDiff = userScore - drawScore;
        const isAboveCutoff = scoreDiff >= 0;
        
        comparisonContainer.innerHTML = `
          <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-xl p-6 border border-blue-200 dark:border-blue-700">
            <div class="flex items-center justify-between mb-4">
              <h4 class="text-lg font-semibold text-gray-900 dark:text-white">Latest Express Entry Draw</h4>
              <span class="text-sm text-gray-500 dark:text-gray-400">${fallbackDraw.drawDate}</span>
            </div>
            
            <div class="grid grid-cols-2 gap-4 mb-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">${fallbackDraw.crsScore}</div>
                <div class="text-sm text-gray-600 dark:text-gray-400">Minimum CRS</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600 dark:text-green-400">${fallbackDraw.invitationsIssued.toLocaleString()}</div>
                <div class="text-sm text-gray-600 dark:text-gray-400">Invitations</div>
              </div>
            </div>
            
            <div class="text-center p-4 rounded-lg ${isAboveCutoff ? 'bg-green-100 dark:bg-green-900/20 border border-green-200 dark:border-green-700' : 'bg-yellow-100 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700'}">
              <div class="text-lg font-semibold ${isAboveCutoff ? 'text-green-700 dark:text-green-300' : 'text-yellow-700 dark:text-yellow-300'}">
                ${isAboveCutoff ? 'üéâ Congratulations!' : 'üìà Keep Improving!'}
              </div>
              <div class="text-sm ${isAboveCutoff ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}">
                Your score is ${Math.abs(scoreDiff)} points ${isAboveCutoff ? 'above' : 'below'} the latest cutoff
              </div>
            </div>
          </div>
        `;
      }
    }

    // CSV Export Function
    function exportToCSV() {
      const agePoints = parseInt((document.querySelector('#age-points .points-value') as HTMLElement)?.textContent || '0');
      const educationPoints = parseInt((document.querySelector('#education-points .points-value') as HTMLElement)?.textContent || '0');
      const languagePoints = parseInt((document.querySelector('#first-language-total .points-value') as HTMLElement)?.textContent || '0');
      const secondLanguagePoints = parseInt((document.querySelector('#second-language-total .points-value') as HTMLElement)?.textContent || '0');
      const workExperiencePoints = parseInt((document.querySelector('#work-experience-total .points-value') as HTMLElement)?.textContent || '0');
      const transferabilityPoints = parseInt((document.querySelector('#transferability-total .points-value') as HTMLElement)?.textContent || '0');
      const spousePoints = parseInt((document.querySelector('#spouse-total .points-value') as HTMLElement)?.textContent || '0');
      const additionalPoints = parseInt((document.querySelector('#additional-total .points-value') as HTMLElement)?.textContent || '0');
      const totalScore = agePoints + educationPoints + languagePoints + secondLanguagePoints + workExperiencePoints + transferabilityPoints + spousePoints + additionalPoints;

      const csvData = [
        ['CRS Score Breakdown', ''],
        ['Category', 'Points'],
        ['Age', agePoints],
        ['Education', educationPoints],
        ['First Language', languagePoints],
        ['Second Language', secondLanguagePoints],
        ['Work Experience', workExperiencePoints],
        ['Skill Transferability', transferabilityPoints],
        ['Spouse Factors', spousePoints],
        ['Additional Factors', additionalPoints],
        ['', ''],
        ['Total CRS Score', totalScore],
        ['', ''],
        ['Generated on', new Date().toLocaleDateString()],
        ['Time', new Date().toLocaleTimeString()]
      ];

      const csvContent = csvData.map(row => row.join(',')).join('\\n');
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      
      if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `Immigratic-CRS-Score-Breakdown-${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    }

    // Debug: Log when everything is set up
    console.log('CRS Calculator initialized successfully!');
    
    // Debug: Simple test
    setTimeout(() => {
      console.log('Calculator loaded and ready!');
    }, 500);

    // FSW Calculator Logic
    setupFSWCalculator();
  });

  // FSW Calculator Setup Function
  function setupFSWCalculator() {
    let fswCurrentStep = 1;
    const fswTotalSteps = 6;
    let selectedFswLanguageTest: string | null = null;
    
    // CLB Conversion Data (same as CRS calculator)
    const fswClbData = {
      "IELTS": {
        "reading": [
          {"clb_level": 10, "score": 8.0},
          {"clb_level": 9, "score": 7.0},
          {"clb_level": 8, "score": 6.5},
          {"clb_level": 7, "score": 6.0},
          {"clb_level": 6, "score": 5.0},
          {"clb_level": 5, "score": 4.0},
          {"clb_level": 4, "score": 3.5}
        ],
        "writing": [
          {"clb_level": 10, "score": 7.5},
          {"clb_level": 9, "score": 7.0},
          {"clb_level": 8, "score": 6.5},
          {"clb_level": 7, "score": 6.0},
          {"clb_level": 6, "score": 5.5},
          {"clb_level": 5, "score": 5.0},
          {"clb_level": 4, "score": 4.0}
        ],
        "listening": [
          {"clb_level": 10, "score": 8.5},
          {"clb_level": 9, "score": 8.0},
          {"clb_level": 8, "score": 7.5},
          {"clb_level": 7, "score": 6.0},
          {"clb_level": 6, "score": 5.5},
          {"clb_level": 5, "score": 5.0},
          {"clb_level": 4, "score": 4.5}
        ],
        "speaking": [
          {"clb_level": 10, "score": 7.5},
          {"clb_level": 9, "score": 7.0},
          {"clb_level": 8, "score": 6.5},
          {"clb_level": 7, "score": 6.0},
          {"clb_level": 6, "score": 5.5},
          {"clb_level": 5, "score": 5.0},
          {"clb_level": 4, "score": 4.0}
        ]
      },
      "CELPIP": {
        "reading": [
          {"clb_level": 10, "score": 10},
          {"clb_level": 9, "score": 9},
          {"clb_level": 8, "score": 8},
          {"clb_level": 7, "score": 7},
          {"clb_level": 6, "score": 6},
          {"clb_level": 5, "score": 5},
          {"clb_level": 4, "score": 4}
        ],
        "writing": [
          {"clb_level": 10, "score": 10},
          {"clb_level": 9, "score": 9},
          {"clb_level": 8, "score": 8},
          {"clb_level": 7, "score": 7},
          {"clb_level": 6, "score": 6},
          {"clb_level": 5, "score": 5},
          {"clb_level": 4, "score": 4}
        ],
        "listening": [
          {"clb_level": 10, "score": 10},
          {"clb_level": 9, "score": 9},
          {"clb_level": 8, "score": 8},
          {"clb_level": 7, "score": 7},
          {"clb_level": 6, "score": 6},
          {"clb_level": 5, "score": 5},
          {"clb_level": 4, "score": 4}
        ],
        "speaking": [
          {"clb_level": 10, "score": 10},
          {"clb_level": 9, "score": 9},
          {"clb_level": 8, "score": 8},
          {"clb_level": 7, "score": 7},
          {"clb_level": 6, "score": 6},
          {"clb_level": 5, "score": 5},
          {"clb_level": 4, "score": 4}
        ]
      },
      "PTE": {
        "reading": [
          {"clb_level": 10, "score": 88},
          {"clb_level": 9, "score": 78},
          {"clb_level": 8, "score": 69},
          {"clb_level": 7, "score": 60},
          {"clb_level": 6, "score": 51},
          {"clb_level": 5, "score": 42},
          {"clb_level": 4, "score": 33}
        ],
        "writing": [
          {"clb_level": 10, "score": 90},
          {"clb_level": 9, "score": 79},
          {"clb_level": 8, "score": 69},
          {"clb_level": 7, "score": 60},
          {"clb_level": 6, "score": 51},
          {"clb_level": 5, "score": 42},
          {"clb_level": 4, "score": 32}
        ],
        "listening": [
          {"clb_level": 10, "score": 89},
          {"clb_level": 9, "score": 82},
          {"clb_level": 8, "score": 71},
          {"clb_level": 7, "score": 60},
          {"clb_level": 6, "score": 50},
          {"clb_level": 5, "score": 39},
          {"clb_level": 4, "score": 28}
        ],
        "speaking": [
          {"clb_level": 10, "score": 89},
          {"clb_level": 9, "score": 84},
          {"clb_level": 8, "score": 76},
          {"clb_level": 7, "score": 68},
          {"clb_level": 6, "score": 59},
          {"clb_level": 5, "score": 51},
          {"clb_level": 4, "score": 42}
        ]
      },
      "TEF_NEW": {
        "reading": [
          {"clb_level": 10, "score": 263},
          {"clb_level": 9, "score": 248},
          {"clb_level": 8, "score": 233},
          {"clb_level": 7, "score": 207},
          {"clb_level": 6, "score": 181},
          {"clb_level": 5, "score": 151},
          {"clb_level": 4, "score": 121}
        ],
        "writing": [
          {"clb_level": 10, "score": 393},
          {"clb_level": 9, "score": 371},
          {"clb_level": 8, "score": 349},
          {"clb_level": 7, "score": 310},
          {"clb_level": 6, "score": 271},
          {"clb_level": 5, "score": 226},
          {"clb_level": 4, "score": 181}
        ],
        "listening": [
          {"clb_level": 10, "score": 316},
          {"clb_level": 9, "score": 298},
          {"clb_level": 8, "score": 280},
          {"clb_level": 7, "score": 249},
          {"clb_level": 6, "score": 217},
          {"clb_level": 5, "score": 181},
          {"clb_level": 4, "score": 145}
        ],
        "speaking": [
          {"clb_level": 10, "score": 393},
          {"clb_level": 9, "score": 371},
          {"clb_level": 8, "score": 349},
          {"clb_level": 7, "score": 310},
          {"clb_level": 6, "score": 271},
          {"clb_level": 5, "score": 226},
          {"clb_level": 4, "score": 181}
        ]
      },
      "TCF": {
        "reading": [
          {"clb_level": 10, "score": 549},
          {"clb_level": 9, "score": 524},
          {"clb_level": 8, "score": 499},
          {"clb_level": 7, "score": 453},
          {"clb_level": 6, "score": 406},
          {"clb_level": 5, "score": 375},
          {"clb_level": 4, "score": 342}
        ],
        "writing": [
          {"clb_level": 10, "score": 16},
          {"clb_level": 9, "score": 14},
          {"clb_level": 8, "score": 12},
          {"clb_level": 7, "score": 10},
          {"clb_level": 6, "score": 8},
          {"clb_level": 5, "score": 6},
          {"clb_level": 4, "score": 4}
        ],
        "listening": [
          {"clb_level": 10, "score": 549},
          {"clb_level": 9, "score": 523},
          {"clb_level": 8, "score": 503},
          {"clb_level": 7, "score": 458},
          {"clb_level": 6, "score": 398},
          {"clb_level": 5, "score": 369},
          {"clb_level": 4, "score": 331}
        ],
        "speaking": [
          {"clb_level": 10, "score": 16},
          {"clb_level": 9, "score": 14},
          {"clb_level": 8, "score": 12},
          {"clb_level": 7, "score": 10},
          {"clb_level": 6, "score": 8},
          {"clb_level": 5, "score": 6},
          {"clb_level": 4, "score": 4}
        ]
      }
    };
    
    // CLB conversion function
    function convertFswScoreToCLB(testType: string, skill: string, score: number): number {
      const testData = fswClbData[testType as keyof typeof fswClbData];
      if (!testData) return 0;
      
      const skillData = testData[skill as keyof typeof testData];
      if (!skillData) return 0;
      
      // Find the highest CLB level where the score meets or exceeds the requirement
      for (const level of skillData) {
        if (score >= level.score) {
          return level.clb_level;
        }
      }
      
      return 0; // Below minimum
    }
    const fswData = {
      "language_proficiency": {
        "first_official_language": {
          "CLB_7": {
            "per_ability": 4,
            "total": 16
          },
          "CLB_8": {
            "per_ability": 5,
            "total": 20
          },
          "CLB_9_or_higher": {
            "per_ability": 6,
            "total": 24
          },
          "CLB_6_or_less": {
            "per_ability": 0,
            "total": 0
          }
        },
        "second_official_language": {
          "CLB_5_or_higher": {
            "total": 4
          },
          "CLB_4_or_lower": {
            "total": 0
          },
          "": {
            "total": 0
          }
        }
      },
      "education": {
        "less_than_secondary": 0,
        "secondary": 5,
        "one_year": 15,
        "two_year": 19,
        "bachelors": 21,
        "two_or_more": 22,
        "masters": 23,
        "doctoral": 25
      },
      "work_experience": {
        "less_than_1": 0,
        "1": 9,
        "2-3": 11,
        "4-5": 13,
        "6_or_more": 15
      },
      "age": {
        17: 0, 18: 11, 19: 12, 20: 12, 21: 12, 22: 12, 23: 12, 24: 12, 25: 12, 26: 12, 27: 12, 28: 12, 29: 12,
        30: 11, 31: 10, 32: 9, 33: 8, 34: 7, 35: 6, 36: 5, 37: 4, 38: 3, 39: 2, 40: 1
      },
      "arranged_employment": {
        "no": 0,
        "yes": 10
      }
    };

    let fswScores = {
      language: 0,
      education: 0,
      work: 0,
      age: 0,
      job: 0,
      adaptability: 0
    };

    // Get FSW elements
    const fswLanguageTest = document.getElementById('fsw-language-test') as HTMLSelectElement;
    const fswSpeakingScore = document.getElementById('fsw-speaking-score') as HTMLInputElement;
    const fswListeningScore = document.getElementById('fsw-listening-score') as HTMLInputElement;
    const fswReadingScore = document.getElementById('fsw-reading-score') as HTMLInputElement;
    const fswWritingScore = document.getElementById('fsw-writing-score') as HTMLInputElement;
    const fswSpeaking = document.getElementById('fsw-speaking') as HTMLSelectElement;
    const fswListening = document.getElementById('fsw-listening') as HTMLSelectElement;
    const fswReading = document.getElementById('fsw-reading') as HTMLSelectElement;
    const fswWriting = document.getElementById('fsw-writing') as HTMLSelectElement;
    const fswSecondLang = document.getElementById('fsw-second-language') as HTMLSelectElement;
    const fswEducation = document.getElementById('fsw-education') as HTMLSelectElement;
    const fswWorkExp = document.getElementById('fsw-work-experience') as HTMLSelectElement;
    const fswAge = document.getElementById('fsw-age') as HTMLInputElement;
    const fswJobOffer = document.getElementById('fsw-job-offer') as HTMLSelectElement;
    
    // Adaptability checkboxes
    const fswCanadianWork = document.getElementById('fsw-canadian-work') as HTMLInputElement;
    const fswCanadianStudy = document.getElementById('fsw-canadian-study') as HTMLInputElement;
    const fswSpouseLanguage = document.getElementById('fsw-spouse-language') as HTMLInputElement;
    const fswRelatives = document.getElementById('fsw-relatives') as HTMLInputElement;
    const fswArrangedEmploymentAdapt = document.getElementById('fsw-arranged-employment-adapt') as HTMLInputElement;

    // Score display elements
    const fswTotalScore = document.getElementById('fsw-total-score-value') as HTMLElement;
    const fswEligibilityStatus = document.getElementById('fsw-eligibility-status') as HTMLElement;
    const fswLanguagePoints = document.getElementById('fsw-language-points') as HTMLElement;
    const fswEducationPoints = document.getElementById('fsw-education-points') as HTMLElement;
    const fswWorkPoints = document.getElementById('fsw-work-points') as HTMLElement;
    const fswAgePoints = document.getElementById('fsw-age-points') as HTMLElement;
    const fswJobPoints = document.getElementById('fsw-job-points') as HTMLElement;
    const fswAdaptabilityPoints = document.getElementById('fsw-adaptability-points') as HTMLElement;

    const fswCalculateBtn = document.getElementById('fsw-calculate-btn') as HTMLButtonElement;
    const fswResults = document.getElementById('fsw-results') as HTMLElement;

    // FSW Navigation elements
    const fswNextBtn = document.getElementById('fsw-next-btn') as HTMLButtonElement;
    const fswPrevBtn = document.getElementById('fsw-prev-btn') as HTMLButtonElement;
    const fswProgressBar = document.getElementById('fsw-progress-bar') as HTMLElement;
    const fswProgressText = document.getElementById('fsw-progress-text') as HTMLElement;

    // FSW Step Navigation Functions
    function updateFSWStep(step: number) {
      fswCurrentStep = step;
      
      // Hide all steps
      document.querySelectorAll('.fsw-calculator-step').forEach(s => {
        (s as HTMLElement).style.display = 'none';
        s.classList.remove('active');
      });
      
      // Show current step
      const currentStepEl = document.querySelector(`.fsw-calculator-step[data-step="${step}"]`) as HTMLElement;
      if (currentStepEl) {
        currentStepEl.style.display = 'block';
        currentStepEl.classList.add('active');
      }

      // Update step indicators
      document.querySelectorAll('.fsw-step-indicator').forEach((indicator, index) => {
        indicator.classList.remove('active', 'completed');
        
        if (index + 1 < step) {
          indicator.classList.add('completed');
        } else if (index + 1 === step) {
          indicator.classList.add('active');
        }
      });
      
      // Update progress bar
      const progress = (step / fswTotalSteps) * 100;
      if (fswProgressBar) fswProgressBar.style.width = `${progress}%`;
      if (fswProgressText) fswProgressText.textContent = `Step ${step} of ${fswTotalSteps}`;
      
      // Update buttons
      if (fswPrevBtn) fswPrevBtn.style.display = step > 1 ? 'flex' : 'none';
      if (fswNextBtn) fswNextBtn.style.display = step < fswTotalSteps ? 'flex' : 'none';
      if (fswCalculateBtn) fswCalculateBtn.style.display = step === fswTotalSteps ? 'flex' : 'none';
    }

    // FSW Navigation Event Listeners
    if (fswNextBtn) {
      fswNextBtn.addEventListener('click', function() {
        if (fswCurrentStep < fswTotalSteps) {
          updateFSWStep(fswCurrentStep + 1);
        }
      });
    }

    if (fswPrevBtn) {
      fswPrevBtn.addEventListener('click', function() {
        if (fswCurrentStep > 1) {
          updateFSWStep(fswCurrentStep - 1);
        }
      });
    }

    // Initialize FSW step display
    updateFSWStep(1);
    
    // Setup FSW language test selection
    setupFswLanguageTest();
    
    function setupFswLanguageTest() {
      if (fswLanguageTest) {
        fswLanguageTest.addEventListener('change', function() {
          selectedFswLanguageTest = this.value;
          
          const scoreInputs = document.getElementById('fsw-score-inputs');
          const clbDropdowns = document.getElementById('fsw-clb-dropdowns');
          const tefInfo = document.getElementById('fsw-tef-info');
          
          if (selectedFswLanguageTest) {
            // Show score inputs, hide CLB dropdowns
            if (scoreInputs) scoreInputs.style.display = 'block';
            if (clbDropdowns) clbDropdowns.style.display = 'none';
            
            // Show TEF info if TEF is selected
            if (tefInfo) {
              if (selectedFswLanguageTest === 'TEF_NEW') {
                tefInfo.style.display = 'block';
                tefInfo.style.setProperty('display', 'block', 'important');
              } else {
                tefInfo.style.display = 'none';
                tefInfo.style.setProperty('display', 'none', 'important');
              }
            }
          } else {
            // Hide both sections if no test selected
            if (scoreInputs) scoreInputs.style.display = 'none';
            if (clbDropdowns) clbDropdowns.style.display = 'none';
            if (tefInfo) {
              tefInfo.style.display = 'none';
              tefInfo.style.setProperty('display', 'none', 'important');
            }
          }
          
          // Reset scores when changing test type
          resetFswLanguageScores();
        });
      }
    }
    
    function resetFswLanguageScores() {
      const scoreInputs = [fswSpeakingScore, fswListeningScore, fswReadingScore, fswWritingScore];
      scoreInputs.forEach(input => {
        if (input) {
          input.value = '';
          // Hide CLB display
          const clbContainer = input.parentElement?.querySelector('.mt-1');
          if (clbContainer) (clbContainer as HTMLElement).style.display = 'none';
        }
      });
      
      // Reset calculation
      calculateFSWLanguage();
    }
    
    // Setup FSW score input handlers
    function setupFswLanguageScoreInputs() {
      const scoreInputs = [
        { input: fswSpeakingScore, skill: 'speaking' },
        { input: fswListeningScore, skill: 'listening' },
        { input: fswReadingScore, skill: 'reading' },
        { input: fswWritingScore, skill: 'writing' }
      ];
      
      scoreInputs.forEach(({ input, skill }) => {
        if (input) {
          input.addEventListener('input', function() {
            const score = parseFloat(this.value);
            
            if (!isNaN(score) && selectedFswLanguageTest) {
              const clbLevel = convertFswScoreToCLB(selectedFswLanguageTest, skill, score);
              const points = getFswSkillPointsFromCLB(clbLevel);
              
              // Update CLB and points display under the input
              const clbContainer = this.parentElement?.querySelector('.mt-1') as HTMLElement;
              if (clbContainer) {
                const clbResult = clbContainer.querySelector('.clb-result');
                const pointsValue = clbContainer.querySelector('.points-value');
                
                if (clbResult) clbResult.textContent = clbLevel.toString();
                if (pointsValue) pointsValue.textContent = points.toString();
                
                clbContainer.style.display = 'block';
              }
              
              // Update hidden CLB dropdown for compatibility
              const hiddenSelect = document.getElementById(`fsw-${skill}`) as HTMLSelectElement;
              if (hiddenSelect) {
                hiddenSelect.value = getFswCLBValue(clbLevel);
              }
            } else {
              // Hide CLB display if no score
              const clbContainer = this.parentElement?.querySelector('.mt-1') as HTMLElement;
              if (clbContainer) clbContainer.style.display = 'none';
            }
            
            // Recalculate total
            calculateFSWLanguage();
          });
        }
      });
    }
    
    function getFswSkillPointsFromCLB(clbLevel: number): number {
      if (clbLevel >= 9) return 6;
      if (clbLevel === 8) return 5;
      if (clbLevel === 7) return 4;
      return 0;
    }
    
    function getFswCLBValue(clbLevel: number): string {
      if (clbLevel >= 9) return 'CLB_9_or_higher';
      if (clbLevel === 8) return 'CLB_8';
      if (clbLevel === 7) return 'CLB_7';
      return 'CLB_6_or_less';
    }
    
    // Initialize score input handlers
    setupFswLanguageScoreInputs();

    function calculateFSWLanguage() {
      let speakingPoints = 0, listeningPoints = 0, readingPoints = 0, writingPoints = 0;
      let speakingCLB = '-', listeningCLB = '-', readingCLB = '-', writingCLB = '-';
      
      // Check if using raw scores or CLB dropdowns
      if (selectedFswLanguageTest && fswSpeakingScore?.value) {
        // Using raw scores - convert to CLB and calculate points
        const speakingScore = parseFloat(fswSpeakingScore.value);
        const listeningScore = parseFloat(fswListeningScore?.value || '0');
        const readingScore = parseFloat(fswReadingScore?.value || '0');
        const writingScore = parseFloat(fswWritingScore?.value || '0');
        
        if (!isNaN(speakingScore)) {
          const clbLevel = convertFswScoreToCLB(selectedFswLanguageTest, 'speaking', speakingScore);
          speakingCLB = clbLevel.toString();
          speakingPoints = getFswSkillPointsFromCLB(clbLevel);
        }
        
        if (!isNaN(listeningScore)) {
          const clbLevel = convertFswScoreToCLB(selectedFswLanguageTest, 'listening', listeningScore);
          listeningCLB = clbLevel.toString();
          listeningPoints = getFswSkillPointsFromCLB(clbLevel);
        }
        
        if (!isNaN(readingScore)) {
          const clbLevel = convertFswScoreToCLB(selectedFswLanguageTest, 'reading', readingScore);
          readingCLB = clbLevel.toString();
          readingPoints = getFswSkillPointsFromCLB(clbLevel);
        }
        
        if (!isNaN(writingScore)) {
          const clbLevel = convertFswScoreToCLB(selectedFswLanguageTest, 'writing', writingScore);
          writingCLB = clbLevel.toString();
          writingPoints = getFswSkillPointsFromCLB(clbLevel);
        }
      } else {
        // Using CLB dropdowns (fallback)
        const speaking = fswSpeaking?.value || '';
        const listening = fswListening?.value || '';
        const reading = fswReading?.value || '';
        const writing = fswWriting?.value || '';
        
        speakingPoints = getSkillPoints(speaking);
        listeningPoints = getSkillPoints(listening);
        readingPoints = getSkillPoints(reading);
        writingPoints = getSkillPoints(writing);
        
        // Extract CLB levels from dropdown values
        speakingCLB = extractCLBFromValue(speaking);
        listeningCLB = extractCLBFromValue(listening);
        readingCLB = extractCLBFromValue(reading);
        writingCLB = extractCLBFromValue(writing);
      }
      
      // Calculate first language total
      const firstLangTotal = speakingPoints + listeningPoints + readingPoints + writingPoints;
      
      // Calculate second language points
      const secondLang = fswSecondLang?.value || '';
      const secondLangData = fswData.language_proficiency.second_official_language[secondLang as keyof typeof fswData.language_proficiency.second_official_language];
      const secondPoints = secondLangData?.total || 0;
      
      // Update total language score
      fswScores.language = firstLangTotal + secondPoints;
      
      // Update display elements
      if (fswLanguagePoints) fswLanguagePoints.textContent = fswScores.language.toString();
      
      // Update detailed breakdown displays
      const firstLangBreakdown = document.getElementById('fsw-first-lang-breakdown');
      const skillBreakdown = document.getElementById('fsw-skill-breakdown');
      
      if (firstLangBreakdown) {
        firstLangBreakdown.textContent = `${firstLangTotal}/24 points`;
      }
      
      if (skillBreakdown) {
        skillBreakdown.textContent = `Speaking: CLB ${speakingCLB} (${speakingPoints} pts) | Listening: CLB ${listeningCLB} (${listeningPoints} pts) | Reading: CLB ${readingCLB} (${readingPoints} pts) | Writing: CLB ${writingCLB} (${writingPoints} pts)`;
      }
      
      updateFSWTotal();
    }
    
    function extractCLBFromValue(value: string): string {
      if (value.includes('CLB_9')) return '9+';
      if (value.includes('CLB_8')) return '8';
      if (value.includes('CLB_7')) return '7';
      if (value.includes('CLB_6')) return '6-';
      return '-';
    }
    
    function getSkillPoints(skillLevel: string): number {
      switch (skillLevel) {
        case 'CLB_9_or_higher':
          return 6;
        case 'CLB_8':
          return 5;
        case 'CLB_7':
          return 4;
        case 'CLB_6_or_less':
        default:
          return 0;
      }
    }

    function calculateFSWEducation() {
      const education = fswEducation?.value || '';
      fswScores.education = fswData.education[education as keyof typeof fswData.education] || 0;
      if (fswEducationPoints) fswEducationPoints.textContent = fswScores.education.toString();
      updateFSWTotal();
    }

    function calculateFSWWork() {
      const work = fswWorkExp?.value || '';
      fswScores.work = fswData.work_experience[work as keyof typeof fswData.work_experience] || 0;
      if (fswWorkPoints) fswWorkPoints.textContent = fswScores.work.toString();
      updateFSWTotal();
    }

    function calculateFSWAge() {
      const age = parseInt(fswAge?.value || '0');
      let agePoints = 0;
      
      if (age >= 20 && age <= 29) {
        agePoints = 12;
      } else if (age >= 17 && age <= 40) {
        agePoints = fswData.age[age as keyof typeof fswData.age] || 0;
      } else if (age > 40) {
        agePoints = 0;
      }
      
      fswScores.age = agePoints;
      if (fswAgePoints) fswAgePoints.textContent = fswScores.age.toString();
      updateFSWTotal();
    }

    function calculateFSWJob() {
      const job = fswJobOffer?.value || '';
      fswScores.job = fswData.arranged_employment[job as keyof typeof fswData.arranged_employment] || 0;
      if (fswJobPoints) fswJobPoints.textContent = fswScores.job.toString();
      updateFSWTotal();
    }

    function calculateFSWAdaptability() {
      let adaptPoints = 0;
      
      // Check each adaptability factor (max 10 points total)
      if (fswCanadianWork?.checked) adaptPoints += 10;
      if (fswCanadianStudy?.checked) adaptPoints += 5;
      if (fswSpouseLanguage?.checked) adaptPoints += 5;
      if (fswRelatives?.checked) adaptPoints += 5;
      if (fswArrangedEmploymentAdapt?.checked) adaptPoints += 5;
      
      // Cap at 10 points maximum
      fswScores.adaptability = Math.min(adaptPoints, 10);
      if (fswAdaptabilityPoints) fswAdaptabilityPoints.textContent = fswScores.adaptability.toString();
      updateFSWTotal();
    }

    function updateFSWTotal() {
      const total = fswScores.language + fswScores.education + fswScores.work + fswScores.age + fswScores.job + fswScores.adaptability;
      
      if (fswTotalScore) fswTotalScore.textContent = total.toString();
      
      // Check critical eligibility requirements
      const workExp = fswWorkExp?.value || '';
      
      // Check language eligibility - use raw scores if available, otherwise CLB dropdowns
      let hasMinimumLanguage = false;
      
      if (selectedFswLanguageTest && fswSpeakingScore?.value) {
        // Using raw scores - check CLB conversion
        const speakingScore = parseFloat(fswSpeakingScore.value);
        const listeningScore = parseFloat(fswListeningScore?.value || '0');
        const readingScore = parseFloat(fswReadingScore?.value || '0');
        const writingScore = parseFloat(fswWritingScore?.value || '0');
        
        const speakingCLB = !isNaN(speakingScore) ? convertFswScoreToCLB(selectedFswLanguageTest, 'speaking', speakingScore) : 0;
        const listeningCLB = !isNaN(listeningScore) ? convertFswScoreToCLB(selectedFswLanguageTest, 'listening', listeningScore) : 0;
        const readingCLB = !isNaN(readingScore) ? convertFswScoreToCLB(selectedFswLanguageTest, 'reading', readingScore) : 0;
        const writingCLB = !isNaN(writingScore) ? convertFswScoreToCLB(selectedFswLanguageTest, 'writing', writingScore) : 0;
        
        hasMinimumLanguage = speakingCLB >= 7 && listeningCLB >= 7 && readingCLB >= 7 && writingCLB >= 7;
      } else {
        // Using CLB dropdowns (fallback)
        const speaking = fswSpeaking?.value || '';
        const listening = fswListening?.value || '';
        const reading = fswReading?.value || '';
        const writing = fswWriting?.value || '';
        
        hasMinimumLanguage = (speaking === 'CLB_7' || speaking === 'CLB_8' || speaking === 'CLB_9_or_higher') &&
                            (listening === 'CLB_7' || listening === 'CLB_8' || listening === 'CLB_9_or_higher') &&
                            (reading === 'CLB_7' || reading === 'CLB_8' || reading === 'CLB_9_or_higher') &&
                            (writing === 'CLB_7' || writing === 'CLB_8' || writing === 'CLB_9_or_higher');
      }
      
      // Critical deal-breakers
      const hasMinimumWork = workExp !== 'less_than_1' && workExp !== '';
      
      // Update eligibility status
      if (fswEligibilityStatus) {
        if (!hasMinimumWork) {
          fswEligibilityStatus.innerHTML = '<span class="text-red-600 dark:text-red-400">‚ùå Ineligible: Minimum 1 year work experience required</span>';
        } else if (!hasMinimumLanguage) {
          fswEligibilityStatus.innerHTML = '<span class="text-red-600 dark:text-red-400">‚ùå Ineligible: Minimum CLB 7 in first language required</span>';
        } else if (total >= 67) {
          fswEligibilityStatus.innerHTML = '<span class="text-green-600 dark:text-green-400">‚úÖ Eligible for FSW Program! Ready for Express Entry</span>';
        } else {
          fswEligibilityStatus.innerHTML = `<span class="text-red-600 dark:text-red-400">‚ùå Below minimum score (${67 - total} more points needed)</span>`;
        }
      }
    }

    // Event listeners for FSW calculator
    if (fswLanguageTest) fswLanguageTest.addEventListener('change', calculateFSWLanguage);
    if (fswSpeakingScore) fswSpeakingScore.addEventListener('input', calculateFSWLanguage);
    if (fswListeningScore) fswListeningScore.addEventListener('input', calculateFSWLanguage);
    if (fswReadingScore) fswReadingScore.addEventListener('input', calculateFSWLanguage);
    if (fswWritingScore) fswWritingScore.addEventListener('input', calculateFSWLanguage);
    if (fswSpeaking) fswSpeaking.addEventListener('change', calculateFSWLanguage);
    if (fswListening) fswListening.addEventListener('change', calculateFSWLanguage);
    if (fswReading) fswReading.addEventListener('change', calculateFSWLanguage);
    if (fswWriting) fswWriting.addEventListener('change', calculateFSWLanguage);
    if (fswSecondLang) fswSecondLang.addEventListener('change', calculateFSWLanguage);
    if (fswEducation) fswEducation.addEventListener('change', calculateFSWEducation);
    if (fswWorkExp) fswWorkExp.addEventListener('change', calculateFSWWork);
    if (fswAge) fswAge.addEventListener('input', calculateFSWAge);
    if (fswJobOffer) fswJobOffer.addEventListener('change', calculateFSWJob);
    
    // Adaptability checkboxes
    if (fswCanadianWork) fswCanadianWork.addEventListener('change', calculateFSWAdaptability);
    if (fswCanadianStudy) fswCanadianStudy.addEventListener('change', calculateFSWAdaptability);
    if (fswSpouseLanguage) fswSpouseLanguage.addEventListener('change', calculateFSWAdaptability);
    if (fswRelatives) fswRelatives.addEventListener('change', calculateFSWAdaptability);
    if (fswArrangedEmploymentAdapt) fswArrangedEmploymentAdapt.addEventListener('change', calculateFSWAdaptability);

    // Generate Report button
    if (fswCalculateBtn) {
      fswCalculateBtn.addEventListener('click', function() {
        generateFSWReport();
      });
    }

    function generateFSWReport() {
      const total = fswScores.language + fswScores.education + fswScores.work + fswScores.age + fswScores.job + fswScores.adaptability;
      
      // Check critical eligibility requirements
      const workExp = fswWorkExp?.value || '';
      const speaking = fswSpeaking?.value || '';
      const listening = fswListening?.value || '';
      const reading = fswReading?.value || '';
      const writing = fswWriting?.value || '';
      
      // Critical deal-breakers - ALL skills must be CLB 7 or higher
      const hasMinimumWork = workExp !== 'less_than_1' && workExp !== '';
      const hasMinimumLanguage = (speaking === 'CLB_7' || speaking === 'CLB_8' || speaking === 'CLB_9_or_higher') &&
                                (listening === 'CLB_7' || listening === 'CLB_8' || listening === 'CLB_9_or_higher') &&
                                (reading === 'CLB_7' || reading === 'CLB_8' || reading === 'CLB_9_or_higher') &&
                                (writing === 'CLB_7' || writing === 'CLB_8' || writing === 'CLB_9_or_higher');
      const isEligible = hasMinimumWork && hasMinimumLanguage && total >= 67;
      
      // Update final score and status
      const fswFinalScore = document.getElementById('fsw-final-score') as HTMLElement;
      const fswFinalStatus = document.getElementById('fsw-final-status') as HTMLElement;
      
      if (fswFinalScore) fswFinalScore.textContent = total.toString();
      
      if (fswFinalStatus) {
        if (!hasMinimumWork) {
          fswFinalStatus.innerHTML = '<span class="text-red-600 dark:text-red-400">‚ùå Ineligible: Minimum 1 year work experience required</span>';
        } else if (!hasMinimumLanguage) {
          fswFinalStatus.innerHTML = '<span class="text-red-600 dark:text-red-400">‚ùå Ineligible: Minimum CLB 7 in first language required</span>';
        } else if (total >= 67) {
          fswFinalStatus.innerHTML = '<span class="text-green-600 dark:text-green-400">‚úÖ Eligible for FSW Program! Ready for Express Entry</span>';
        } else {
          fswFinalStatus.innerHTML = `<span class="text-red-600 dark:text-red-400">‚ùå Not Eligible (Need ${67 - total}+ points)</span>`;
        }
      }

      // Generate detailed breakdown
      const breakdown = document.getElementById('fsw-detailed-breakdown') as HTMLElement;
      if (breakdown) {
        breakdown.innerHTML = `
          <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <h5 class="font-semibold text-gray-900 dark:text-white mb-2">üó£Ô∏è Language</h5>
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">${fswScores.language}/28</div>
          </div>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <h5 class="font-semibold text-gray-900 dark:text-white mb-2">üéì Education</h5>
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">${fswScores.education}/25</div>
          </div>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <h5 class="font-semibold text-gray-900 dark:text-white mb-2">üíº Work Experience</h5>
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">${fswScores.work}/15</div>
          </div>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <h5 class="font-semibold text-gray-900 dark:text-white mb-2">üéÇ Age</h5>
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">${fswScores.age}/12</div>
          </div>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <h5 class="font-semibold text-gray-900 dark:text-white mb-2">üíº Job Offer</h5>
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">${fswScores.job}/10</div>
          </div>
          <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <h5 class="font-semibold text-gray-900 dark:text-white mb-2">üè† Adaptability</h5>
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">${fswScores.adaptability}/10</div>
          </div>
        `;
      }

      // Update Next Steps CTA based on eligibility
      const nextStepsCTA = document.getElementById('fsw-next-steps-cta') as HTMLElement;
      if (nextStepsCTA) {
        if (isEligible) {
          nextStepsCTA.innerHTML = `
            <h4 class="text-lg font-bold text-gray-900 dark:text-white mb-3">üéâ Congratulations! You're FSW Eligible!</h4>
            <p class="text-gray-600 dark:text-gray-300 mb-4">
              You qualify for the Federal Skilled Worker program and can enter the Express Entry pool. Calculate your CRS score to see your ranking!
            </p>
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
              <button onclick="showCalculator('crs')" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-300">
                üéØ Calculate CRS Score
                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
              <a href="/tools/master-assessment?utm_source=fsw_calculator&utm_medium=results&utm_campaign=eligible_cta" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white font-semibold rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all duration-300">
                üìã Full Assessment
              </a>
            </div>
          `;
        } else {
          nextStepsCTA.innerHTML = `
            <h4 class="text-lg font-bold text-gray-900 dark:text-white mb-3">Explore Other Immigration Options</h4>
            <p class="text-gray-600 dark:text-gray-300 mb-4">
              While you may not qualify for FSW, there are 35+ other immigration programs available. Get a comprehensive assessment to find your best path.
            </p>
            <a href="/tools/master-assessment?utm_source=fsw_calculator&utm_medium=results&utm_campaign=not_eligible_cta" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-300">
              ‚úì 35+ Programs ‚Ä¢ ‚úì Instantly ‚Ä¢ ‚úì 100% Free
              <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          `;
        }
      }

      // Show results section
      if (fswResults) {
        fswResults.style.display = 'block';
        fswResults.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }

    // PDF Export functionality
    const fswDownloadPDF = document.getElementById('fsw-download-pdf') as HTMLButtonElement;
    if (fswDownloadPDF) {
      fswDownloadPDF.addEventListener('click', function() {
        // Store original title
        const originalTitle = document.title;
        
        // Update title for PDF branding
        const totalScore = fswScores.language + fswScores.education + fswScores.work + fswScores.age + fswScores.job + fswScores.adaptability;
        document.title = `Immigratic FSW Assessment Report - ${totalScore} Points - ${new Date().toISOString().split('T')[0]}`;
        
        // Hide action buttons for cleaner PDF
        const actionButtons = document.querySelector('.flex.gap-4.justify-center') as HTMLElement;
        if (actionButtons) actionButtons.style.display = 'none';
        
        setTimeout(() => {
          window.print();
          // Restore buttons and title after print dialog
          setTimeout(() => {
            if (actionButtons) actionButtons.style.display = 'flex';
            document.title = originalTitle;
          }, 1000);
        }, 100);
      });
    }

    // CSV Export functionality
    const fswExportCSV = document.getElementById('fsw-export-csv') as HTMLButtonElement;
    if (fswExportCSV) {
      fswExportCSV.addEventListener('click', function() {
        const total = fswScores.language + fswScores.education + fswScores.work + fswScores.age + fswScores.job + fswScores.adaptability;
        const csvContent = `FSW Assessment Results\n` +
          `Category,Points,Maximum\n` +
          `Language Proficiency,${fswScores.language},28\n` +
          `Education,${fswScores.education},25\n` +
          `Work Experience,${fswScores.work},15\n` +
          `Age,${fswScores.age},12\n` +
          `Arranged Employment,${fswScores.job},10\n` +
          `Adaptability,${fswScores.adaptability},10\n` +
          `Total Score,${total},100\n` +
          `Eligibility,${total >= 67 ? 'Eligible' : 'Not Eligible'},Pass: 67+`;
        
        const blob = new Blob([csvContent], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `Immigratic-FSW-Assessment-Results-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });
    }

    console.log('FSW Calculator initialized successfully!');
  }
</script>

<!-- Calculator Usage Tracking Script -->
<script>
  // üìä Calculator Usage Tracking System
  
  // Generate unique session ID for this page visit
  const sessionId = 'calc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  let pageStartTime = Date.now();
  
  console.log('üìä Calculator tracking initialized with session:', sessionId.substring(0, 15) + '...');

  // Extract UTM parameters from URL
  function getUTMParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    return {
      utmSource: urlParams.get('utm_source'),
      utmMedium: urlParams.get('utm_medium'),
      utmCampaign: urlParams.get('utm_campaign')
    };
  }

  // Detect device type
  function getDeviceType() {
    const userAgent = navigator.userAgent.toLowerCase();
    if (userAgent.includes('mobile')) return 'mobile';
    if (userAgent.includes('tablet') || userAgent.includes('ipad')) return 'tablet';
    return 'desktop';
  }

  // Track calculator usage
  async function trackCalculatorUsage(calculatorType, calculationResult = null, conversionEvent = null) {
    try {
      const timeSpent = Math.round((Date.now() - pageStartTime) / 1000); // seconds
      const utmParams = getUTMParameters();
      
      const trackingData = {
        calculatorType: calculatorType,
        sessionId: sessionId,
        calculationResult: calculationResult,
        timeSpentSeconds: timeSpent,
        utmSource: utmParams.utmSource,
        utmMedium: utmParams.utmMedium,
        utmCampaign: utmParams.utmCampaign,
        deviceType: getDeviceType(),
        conversionEvent: conversionEvent
      };

      console.log('üìä Tracking calculator usage:', {
        type: calculatorType,
        timeSpent: timeSpent + 's',
        device: getDeviceType(),
        utm: utmParams.utmSource || 'direct'
      });

      const response = await fetch('/api/track-calculator-usage', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(trackingData)
      });

      if (response.ok) {
        console.log('‚úÖ Calculator usage tracked successfully');
      } else {
        console.warn('‚ö†Ô∏è Failed to track calculator usage:', response.status);
      }
      
    } catch (error) {
      // Fail silently - don't interrupt user experience
      console.log('üìä Usage tracking failed (non-critical):', error);
    }
  }

  // Track when calculator cards are clicked (initial engagement)
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üìä Setting up calculator tracking listeners...');
    
    // Track calculator card clicks
    document.querySelectorAll('.calculator-card').forEach(card => {
      card.addEventListener('click', function() {
        const calculatorType = this.getAttribute('data-calculator');
        if (calculatorType) {
          console.log('üìä Calculator card clicked:', calculatorType);
          trackCalculatorUsage(calculatorType, null, 'calculator_opened');
        }
      });
    });

    // Track CRS calculation completion
    const originalCalculateCRS = window.calculateCRS;
    if (originalCalculateCRS) {
      window.calculateCRS = function() {
        const result = originalCalculateCRS();
        
        // Extract the final CRS score for tracking
        setTimeout(() => {
          // Try correct selectors for CRS score
          let crsScore = 0;
          let crsScoreElement = document.querySelector('#final-total-score');
          
          if (!crsScoreElement) {
            // Try the other CRS score element
            crsScoreElement = document.querySelector('#total-score-value');
          }
          
          if (crsScoreElement) {
            const rawText = crsScoreElement.textContent || '';
            console.log('üìä Raw CRS element text:', JSON.stringify(rawText));
            crsScore = parseInt(rawText.trim()) || 0;
            console.log('üìä CRS calculation completed with score:', crsScore);
            trackCalculatorUsage('crs', { crsScore: crsScore }, 'calculation_completed');
          } else {
            console.log('üìä CRS calculation completed but score element not found');
            trackCalculatorUsage('crs', null, 'calculation_completed');
          }
        }, 1500); // Wait longer for DOM update
        
        return result;
      };
    } else {
      // If calculateCRS function doesn't exist, try to hook into form submission or button clicks
      console.log('üìä calculateCRS function not found, setting up alternative tracking');
      
      // Track when calculate buttons are clicked
      document.addEventListener('click', function(e) {
        if (e.target && (e.target.textContent.includes('Calculate') || e.target.id.includes('calculate'))) {
          setTimeout(() => {
            // Look for CRS score in the correct elements
            let crsScore = 0;
            let crsScoreElement = document.querySelector('#final-total-score');
            
            if (!crsScoreElement) {
              crsScoreElement = document.querySelector('#total-score-value');
            }
            
            if (crsScoreElement) {
              const rawText = crsScoreElement.textContent || '';
              console.log('üìä Raw CRS fallback element text:', JSON.stringify(rawText));
              crsScore = parseInt(rawText.trim()) || 0;
              console.log('üìä Found CRS score after calculation:', crsScore);
              trackCalculatorUsage('crs', { crsScore: crsScore }, 'calculation_completed');
            }
          }, 2000);
        }
      });
    }

    // Track FSW calculation completion
    const originalCalculateFSW = window.calculateFSW;
    if (originalCalculateFSW) {
      window.calculateFSW = function() {
        const result = originalCalculateFSW();
        
        // Extract the final FSW score for tracking
        setTimeout(() => {
          // Try correct selector for FSW score
          let fswScore = 0;
          let fswScoreElement = document.querySelector('#fsw-total-score-value');
          
          if (fswScoreElement) {
            fswScore = parseInt(fswScoreElement.textContent.trim()) || 0;
            console.log('üìä FSW calculation completed with score:', fswScore);
            trackCalculatorUsage('fsw', { fswScore: fswScore }, 'calculation_completed');
          } else {
            console.log('üìä FSW calculation completed but score element not found');
            trackCalculatorUsage('fsw', null, 'calculation_completed');
          }
        }, 1000); // Wait for DOM update
        
        return result;
      };
    } else {
      console.log('üìä calculateFSW function not found, setting up alternative FSW tracking');
    }

    // Track PDF downloads
    document.addEventListener('click', function(e) {
      if (e.target.textContent && e.target.textContent.includes('Download PDF')) {
        // Find the currently active calculator or the one being used
        let calculatorType = document.querySelector('.calculator-card.active')?.getAttribute('data-calculator');
        
        // If no active card, check which calculator section is visible
        if (!calculatorType) {
          if (document.querySelector('#crs-calculator:not(.hidden)')) {
            calculatorType = 'crs';
          } else if (document.querySelector('#fsw-calculator:not(.hidden)')) {
            calculatorType = 'fsw';
          } else {
            calculatorType = 'crs'; // Default to CRS
          }
        }
        
        console.log('üìä PDF download initiated for:', calculatorType);
        trackCalculatorUsage(calculatorType, null, 'pdf_downloaded');
      }
    });

    // Track CSV downloads
    document.addEventListener('click', function(e) {
      if (e.target.textContent && e.target.textContent.includes('Download CSV')) {
        const calculatorType = document.querySelector('.calculator-card.active')?.getAttribute('data-calculator') || 'unknown';
        console.log('üìä CSV download initiated for:', calculatorType);
        trackCalculatorUsage(calculatorType, null, 'csv_downloaded');
      }
    });

    console.log('‚úÖ Calculator tracking listeners set up successfully');
  });

  // Track page unload (session end)
  window.addEventListener('beforeunload', function() {
    const timeSpent = Math.round((Date.now() - pageStartTime) / 1000);
    console.log('üìä Session ending, total time spent:', timeSpent + 's');
    
    // Use sendBeacon for reliable tracking on page unload
    if (navigator.sendBeacon) {
      const utmParams = getUTMParameters();
      const trackingData = JSON.stringify({
        calculatorType: 'session_end',
        sessionId: sessionId,
        timeSpentSeconds: timeSpent,
        utmSource: utmParams.utmSource,
        utmMedium: utmParams.utmMedium,
        utmCampaign: utmParams.utmCampaign,
        deviceType: getDeviceType(),
        conversionEvent: 'session_ended'
      });
      
      navigator.sendBeacon('/api/track-calculator-usage', new Blob([trackingData], {type: 'application/json'}));
    }
  });

</script>

<style>
  /* Form Styles */
  .form-group {
    @apply space-y-2;
    margin-bottom: 1.5rem !important;
    display: block !important;
  }
  
  .form-label {
    @apply block text-sm font-semibold text-gray-700 dark:text-gray-300;
    display: block !important;
  }
  
  .label-text {
    @apply mr-1;
  }
  
  .label-required {
    @apply text-red-500;
  }
  
  .form-input {
    @apply w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-xl bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200;
    display: block !important;
    width: 100% !important;
  }
  
  /* Mobile-specific dropdown improvements */
  @media (max-width: 640px) {
    .form-input {
      @apply py-4; /* Larger touch target on mobile */
      font-size: 16px; /* Prevent zoom on iOS */
    }
    
    /* Mobile select elements - force proper positioning */
    select.form-input {
      /* Reset all custom styling that might interfere */
      -webkit-appearance: menulist-button !important;
      -moz-appearance: menulist-button !important;
      appearance: menulist-button !important;
      
      /* Force static positioning to prevent conflicts */
      position: static !important;
      z-index: auto !important;
      
      /* Remove any transforms that might cause positioning issues */
      transform: none !important;
      -webkit-transform: none !important;
      
      /* Ensure proper display */
      display: block !important;
      
      /* Basic styling only */
      border-radius: 8px !important;
      border: 2px solid #d1d5db !important;
      background-color: white !important;
      
      /* Remove any background images */
      background-image: none !important;
      padding-right: 1rem !important;
    }
    
    /* Dark mode adjustments */
    .dark select.form-input {
      background-color: #374151 !important;
      border-color: #4b5563 !important;
      color: white !important;
    }
    
    /* Additional mobile dropdown fixes */
    select.form-input:focus {
      /* Ensure focus doesn't change positioning */
      position: static !important;
      transform: none !important;
      -webkit-transform: none !important;
    }
    
    /* Force body and html to not interfere */
    body, html {
      overflow-x: visible !important;
    }
    
    /* Ensure viewport doesn't clip dropdowns */
    .container, .max-w-7xl, .mx-auto {
      overflow: visible !important;
      position: static !important;
    }
    
    /* Mobile-optimized native select */
    .mobile-optimized-select {
      /* Force dropdown to appear below on mobile */
      position: relative !important;
      z-index: 1 !important;
      
      /* Ensure proper sizing on mobile */
      font-size: 16px !important; /* Prevents zoom on iOS */
      min-height: 48px !important;
      padding: 12px 16px !important;
      
      /* Fix appearance on mobile */
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right 12px center;
      background-size: 16px;
      padding-right: 40px !important;
    }
    
    /* Improve mobile form layout */
    .form-group {
      @apply mb-6; /* More space between form fields on mobile */
      position: relative;
      overflow: visible; /* Ensure dropdowns can extend outside */
    }
    
    /* Ensure form containers don't clip dropdowns */
    .calculator-step {
      overflow: visible !important;
      position: static !important;
    }
    
    .bg-gray-50 {
      overflow: visible !important;
      position: static !important;
    }
    
    /* Reset any problematic container styles on mobile */
    .rounded-2xl {
      position: static !important;
      overflow: visible !important;
    }
    
    /* Ensure the main form container doesn't interfere */
    #crs-calculator-form {
      position: static !important;
      overflow: visible !important;
    }
    
    /* Better mobile label spacing */
    .form-label {
      @apply mb-3; /* More space between label and input on mobile */
    }
    
    /* Mobile radio button improvements */
    input[type="radio"] {
      @apply w-5 h-5; /* Larger radio buttons for easier tapping */
    }
    
    /* Mobile button improvements */
    .btn-primary, .btn-secondary {
      @apply py-4 px-6; /* Larger buttons for better touch targets */
      min-height: 48px; /* Ensure minimum touch target size */
    }
  }
  
  .form-help {
    @apply text-xs text-gray-500 dark:text-gray-400;
    display: block !important;
  }
  
  /* Button Styles */
  .btn-primary {
    @apply inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl;
  }
  
  .btn-secondary {
    @apply inline-flex items-center px-6 py-3 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 font-semibold rounded-xl hover:bg-gray-300 dark:hover:bg-gray-600 transition-all duration-300;
  }
  
  /* Step Indicator Styles */
  .step-indicator {
    @apply flex flex-col items-center space-y-1 sm:space-y-2 text-center;
  }
  
  .step-number {
    @apply w-8 h-8 sm:w-10 sm:h-10 rounded-full border-2 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 flex items-center justify-center font-bold text-xs sm:text-sm transition-all duration-300;
  }
  
  .step-label {
    @apply text-xs sm:text-xs text-gray-500 dark:text-gray-400 font-medium whitespace-nowrap;
  }
  
  .step-indicator.active .step-number {
    @apply border-blue-500 bg-blue-500 text-white;
  }
  
  .step-indicator.active .step-label {
    @apply text-blue-600 dark:text-blue-400;
  }
  
  .step-indicator.completed .step-number {
    @apply border-green-500 bg-green-500 text-white;
  }
  
  .step-indicator.completed .step-label {
    @apply text-green-600 dark:text-green-400;
  }
  
  /* FSW Step Indicators (same styling as CRS) */
  .fsw-step-indicator {
    @apply flex flex-col items-center space-y-1 sm:space-y-2 text-center;
  }
  
  .fsw-step-indicator .step-number {
    @apply w-8 h-8 sm:w-10 sm:h-10 rounded-full border-2 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 flex items-center justify-center font-bold text-xs sm:text-sm transition-all duration-300;
  }
  
  .fsw-step-indicator .step-label {
    @apply text-xs sm:text-xs text-gray-500 dark:text-gray-400 font-medium whitespace-nowrap;
  }
  
  .fsw-step-indicator.active .step-number {
    @apply border-blue-500 bg-blue-500 text-white;
  }
  
  .fsw-step-indicator.active .step-label {
    @apply text-blue-600 dark:text-blue-400;
  }
  
  .fsw-step-indicator.completed .step-number {
    @apply border-green-500 bg-green-500 text-white;
  }
  
  .fsw-step-indicator.completed .step-label {
    @apply text-green-600 dark:text-green-400;
  }
  
  .step-line {
    @apply w-6 sm:w-12 h-0.5 bg-gray-300 dark:bg-gray-600;
  }
  
  /* Animation Classes */
  .calculator-step {
    @apply transition-all duration-500 ease-in-out;
    display: none !important;
  }
  
  .calculator-step.active {
    @apply animate-fadeIn;
    display: block !important;
  }
  
  .calculator-step[data-step="1"]:not(.hidden-by-navigation) {
    display: block !important;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Print Styles */
  @media print {
    body * {
      visibility: hidden;
    }
    
    #results-section, #results-section * {
      visibility: visible;
    }
    
    #results-section {
      position: absolute;
      left: 0;
      top: 0;
      width: 100%;
    }
    
    .btn-secondary, .btn-primary {
      display: none !important;
    }
    
    .bg-gradient-to-br, .bg-gradient-to-r {
      background: white !important;
      border: 1px solid #e5e7eb !important;
    }
    
    .text-blue-600, .text-green-600, .text-red-600, .text-yellow-600 {
      color: #1f2937 !important;
    }
    
    .animate-pulse {
      animation: none !important;
    }
    
    .shadow-lg, .shadow-xl {
      box-shadow: none !important;
      border: 1px solid #e5e7eb !important;
    }
    
    .rounded-xl, .rounded-2xl {
      border-radius: 8px !important;
    }
    
    .p-8 {
      padding: 1rem !important;
    }
    
    .gap-8 {
      gap: 1rem !important;
    }
    
    .text-6xl {
      font-size: 3rem !important;
    }
    
    .text-4xl {
      font-size: 2rem !important;
    }
    
    .text-2xl {
      font-size: 1.5rem !important;
    }
  }
  
  .animate-fadeIn {
    animation: fadeIn 0.5s ease-out;
  }

  /* Points Display Styles */
  .points-display {
    @apply mt-2 p-2 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700;
    opacity: 1 !important;
    visibility: visible !important;
  }
  
  .points-display[style*="display: block"] {
    display: block !important;
  }

  .points-text {
    @apply text-sm text-blue-700 dark:text-blue-300;
  }

  .points-summary {
    @apply p-3 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg border border-blue-200 dark:border-blue-700;
  }

  /* Radio and Checkbox Styles */
  .radio-group {
    @apply space-y-3;
  }

  .radio-option {
    @apply flex items-center space-x-3 p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors;
  }

  .radio-input {
    @apply w-4 h-4 text-blue-600 border-gray-300 dark:border-gray-600 focus:ring-blue-500;
  }

  .radio-label {
    @apply text-sm font-medium text-gray-700 dark:text-gray-300;
  }

  .checkbox-input {
    @apply w-4 h-4 text-blue-600 border-gray-300 dark:border-gray-600 rounded focus:ring-blue-500;
  }

  .checkbox-label {
    @apply ml-3 text-sm font-medium text-gray-700 dark:text-gray-300;
  }

  /* Info Card Styles */
  .info-card {
    @apply p-4 bg-gray-50 dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700;
  }
</style>


