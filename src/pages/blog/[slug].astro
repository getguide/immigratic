---
import Layout from '../../layouts/Layout.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import { client } from '../../lib/sanity.js';

// Get the slug from the URL
export async function getStaticPaths() {
  // Fetch all blog posts from Sanity
  const posts = await client.fetch(`
    *[_type == "post"] {
      slug,
      title,
      excerpt,
      publishedAt,
      "mainImage": mainImage.asset->url,
      "authorName": author->name,
      "categories": categories[]->title,
      body
    }
  `);

  // Generate static paths for each post
  return posts.map((post: any) => ({
    params: { slug: post.slug.current },
    props: { post }
  }));
}

// Get the post data
const { post } = Astro.props;

// Format the date
const formattedDate = post.publishedAt ? new Date(post.publishedAt).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
}) : '';
---

<Layout title={`${post.title} | Immigratic Blog`}>
  <Breadcrumbs 
    items={[
      { text: "Home", href: "/" },
      { text: "Blog", href: "/blog" },
      { text: post.title, current: true }
    ]}
  />

  <!-- Hero Section -->
  <section class="relative bg-gradient-to-br from-blue-900 via-purple-900 to-blue-900 py-20">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <div class="flex items-center justify-center gap-2 mb-4">
        {post.categories && post.categories.map((category: string) => (
          <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full">
            {category}
          </span>
        ))}
      </div>
      <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">
        {post.title}
      </h1>
      <div class="flex items-center justify-center gap-4 text-blue-100">
        {post.authorName && (
          <span>By {post.authorName}</span>
        )}
        {formattedDate && (
          <span>• {formattedDate}</span>
        )}
      </div>
    </div>
  </section>

  <!-- Blog Post Content -->
  <article class="py-16 bg-white dark:bg-gray-900">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Reading Progress Bar -->
      <div class="fixed top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700 z-50">
        <div id="reading-progress" class="h-full bg-gradient-to-r from-blue-500 to-purple-600 transition-all duration-300" style="width: 0%"></div>
      </div>

      {post.mainImage && (
        <div class="mb-8">
          <img 
            src={post.mainImage} 
            alt={post.title}
            class="w-full h-64 md:h-96 object-cover rounded-xl shadow-lg"
          />
        </div>
      )}
      
      {post.excerpt && (
        <div class="mb-8 p-6 bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 rounded-r-lg">
          <p class="text-xl text-gray-700 dark:text-gray-200 leading-relaxed italic">
            {post.excerpt}
          </p>
        </div>
      )}

      <!-- Article Meta -->
      <div class="flex items-center justify-between mb-8 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <div class="flex items-center gap-4">
          {post.authorName && (
            <div class="flex items-center gap-2">
              <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm font-semibold">
                {post.authorName.charAt(0).toUpperCase()}
              </div>
              <span class="text-gray-600 dark:text-gray-300">By {post.authorName}</span>
            </div>
          )}
          {formattedDate && (
            <span class="text-gray-500 dark:text-gray-400">• {formattedDate}</span>
          )}
        </div>
        
        <!-- Reading Time Estimate -->
        <div class="flex items-center gap-2 text-gray-500 dark:text-gray-400">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span id="reading-time">5 min read</span>
        </div>
      </div>

      <!-- Article Content -->
      <div class="prose prose-lg max-w-none dark:prose-invert">
        {post.body && post.body.map((block: any) => {
          if (block._type === 'block') {
            // Handle text blocks
            const text = block.children?.map((child: any) => child.text).join('') || '';
            const style = block.style || 'normal';
            
            switch (style) {
              case 'h1':
                return <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 mt-8 first:mt-0">{text}</h1>;
              case 'h2':
                return <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4 mt-8">{text}</h2>;
              case 'h3':
                return <h3 class="text-xl font-bold text-gray-900 dark:text-white mb-3 mt-6">{text}</h3>;
              case 'blockquote':
                return <blockquote class="border-l-4 border-blue-500 pl-6 italic text-gray-600 dark:text-gray-300 mb-6 bg-blue-50 dark:bg-blue-900/20 py-4 rounded-r-lg">{text}</blockquote>;
              case 'normal':
                return <p class="text-gray-700 dark:text-gray-300 mb-6 leading-relaxed text-lg">{text}</p>;
              default:
                return <p class="text-gray-700 dark:text-gray-300 mb-6 leading-relaxed text-lg">{text}</p>;
            }
          } else if (block._type === 'image') {
            // Handle images
            return (
              <div class="my-8">
                <img 
                  src={block.asset?.url} 
                  alt={block.alt || 'Blog image'}
                  class="w-full rounded-lg shadow-md"
                />
                {block.caption && (
                  <p class="text-sm text-gray-500 dark:text-gray-400 text-center mt-2">{block.caption}</p>
                )}
              </div>
            );
          }
          return null;
        })}
      </div>

      <!-- Article Footer -->
      <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
        <!-- Categories -->
        {post.categories && post.categories.length > 0 && (
          <div class="mb-6">
            <h4 class="text-sm font-semibold text-gray-500 dark:text-gray-400 mb-3 uppercase tracking-wide">Categories</h4>
            <div class="flex flex-wrap gap-2">
              {post.categories.map((category: string) => (
                <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full">
                  {category}
                </span>
              ))}
            </div>
          </div>
        )}

        <!-- Social Sharing -->
        <div class="mb-6">
          <h4 class="text-sm font-semibold text-gray-500 dark:text-gray-400 mb-3 uppercase tracking-wide">Share This Post</h4>
          <div class="flex gap-3">
            <button class="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors" onclick="shareOnTwitter()" title="Share on Twitter">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.665 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
              </svg>
            </button>
            <button class="p-2 bg-blue-800 text-white rounded-lg hover:bg-blue-900 transition-colors" onclick="shareOnFacebook()" title="Share on Facebook">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
              </svg>
            </button>
            <button class="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors" onclick="shareOnLinkedIn()" title="Share on LinkedIn">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </button>
            <button id="copy-link-btn" class="p-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors" onclick="copyLink()" title="Copy link">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Navigation -->
        <div class="flex items-center justify-between">
          <a 
            href="/blog"
            class="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium"
          >
            ← Back to Blog
          </a>
          
          <!-- Related Posts Link (Future Enhancement) -->
          <a 
            href="/blog"
            class="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium"
          >
            More Posts →
          </a>
        </div>
      </div>
    </div>
  </article>
</Layout>

<style>
  .prose {
    color: inherit;
  }
  
  .prose h1, .prose h2, .prose h3 {
    color: inherit;
  }
  
  .prose p {
    color: inherit;
  }
</style>

<script>
  // Make functions globally accessible
  window.shareOnTwitter = function() {
    try {
      const url = window.location.href;
      const text = document.title;
      const twitterUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(text)}`;
      console.log('Opening Twitter:', twitterUrl);
      window.open(twitterUrl, '_blank', 'width=600,height=400');
    } catch (error) {
      console.error('Twitter share error:', error);
      alert('Unable to open Twitter. Please copy the link manually.');
    }
  };
  
  window.shareOnFacebook = function() {
    try {
      const url = window.location.href;
      const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
      console.log('Opening Facebook:', facebookUrl);
      window.open(facebookUrl, '_blank', 'width=600,height=400');
    } catch (error) {
      console.error('Facebook share error:', error);
      alert('Unable to open Facebook. Please copy the link manually.');
    }
  };
  
  window.shareOnLinkedIn = function() {
    try {
      const url = window.location.href;
      const linkedinUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`;
      console.log('Opening LinkedIn:', linkedinUrl);
      window.open(linkedinUrl, '_blank', 'width=600,height=400');
    } catch (error) {
      console.error('LinkedIn share error:', error);
      alert('Unable to open LinkedIn. Please copy the link manually.');
    }
  };
  
  window.copyLink = function() {
    try {
      const url = window.location.href;
      if (navigator.clipboard && window.isSecureContext) {
        // Modern browsers
        navigator.clipboard.writeText(url).then(() => {
          showCopyFeedback();
        }).catch(err => {
          console.error('Clipboard error:', err);
          fallbackCopyTextToClipboard(url);
        });
      } else {
        // Fallback for older browsers
        fallbackCopyTextToClipboard(url);
      }
    } catch (error) {
      console.error('Copy error:', error);
      fallbackCopyTextToClipboard(url);
    }
  };
  
  function showCopyFeedback() {
    const button = document.getElementById('copy-link-btn');
    if (button) {
      const originalHTML = button.innerHTML;
      button.innerHTML = '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
      button.classList.add('bg-green-600');
      setTimeout(() => {
        button.innerHTML = originalHTML;
        button.classList.remove('bg-green-600');
      }, 2000);
    }
  }
  
  function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
      document.execCommand('copy');
      showCopyFeedback();
    } catch (err) {
      console.error('Fallback copy failed:', err);
      alert('Copy failed. Please copy manually: ' + text);
    }
    document.body.removeChild(textArea);
  }
  
  // Reading progress bar functionality
  document.addEventListener('DOMContentLoaded', function() {
    const progressBar = document.getElementById('reading-progress');
    const readingTime = document.getElementById('reading-time');
    
    // Calculate reading time
    function calculateReadingTime() {
      const text = document.querySelector('.prose')?.textContent || '';
      const wordsPerMinute = 200;
      const words = text.trim().split(/\s+/).length;
      const minutes = Math.ceil(words / wordsPerMinute);
      
      if (readingTime) {
        readingTime.textContent = `${minutes} min read`;
      }
    }
    
    // Update reading progress
    function updateReadingProgress() {
      const scrollTop = window.pageYOffset;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = (scrollTop / docHeight) * 100;
      
      if (progressBar) {
        progressBar.style.width = scrollPercent + '%';
      }
    }
    
    // Initialize
    calculateReadingTime();
    window.addEventListener('scroll', updateReadingProgress);
  });
</script>
