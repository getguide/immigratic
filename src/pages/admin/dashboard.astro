---
import AdminLayout from '../../layouts/AdminLayout.astro';
---

<AdminLayout title="Admin Dashboard - Immigratic">
  <!-- Auth Check Script -->
  <script>
    // Check authentication before page loads
    import { createClient } from '@supabase/supabase-js';
    
    const supabaseUrl = 'https://fneodphdhnnogfuxcpxn.supabase.co';
    const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuZW9kcGhkaG5ub2dmdXhjcHhuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1NTQyMjIsImV4cCI6MjA3MTEzMDIyMn0.k80VvOi3YTFw_JJjh1cFSR-Yx5neM2XowQyzKjgkySM';
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Check auth status
    supabase.auth.getSession().then(({ data: { session } }) => {
      if (!session) {
        window.location.href = '/admin/login';
      }
    });
  </script>

  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Navigation Header -->
    <nav class="bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <!-- Logo and Title -->
          <div class="flex items-center">
            <div class="flex-shrink-0 flex items-center">
              <div class="h-8 w-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <div class="ml-3">
                <h1 class="text-xl font-semibold text-gray-900 dark:text-white">Admin Dashboard</h1>
              </div>
            </div>
          </div>

          <!-- User Menu -->
          <div class="flex items-center space-x-4">
            <!-- Refresh Button -->
            <button id="refresh-data" class="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>

            <!-- User Info -->
            <div class="flex items-center space-x-3">
              <div class="text-right">
                <p id="user-email" class="text-sm font-medium text-gray-900 dark:text-white"></p>
                <p class="text-xs text-gray-500 dark:text-gray-400">Administrator</p>
              </div>
              <button id="logout-button" class="flex items-center px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:text-red-600 dark:hover:text-red-400 transition-colors">
                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
                Logout
              </button>
            </div>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <!-- Analytics Overview -->
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Analytics Overview</h2>
        
        <!-- Stats Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <!-- Total Quotes -->
          <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
            <div class="p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Quotes</p>
                  <p id="total-quotes" class="text-2xl font-semibold text-gray-900 dark:text-white">-</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Total Revenue -->
          <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
            <div class="p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Pipeline Value</p>
                  <p id="total-revenue" class="text-2xl font-semibold text-gray-900 dark:text-white">-</p>
                </div>
              </div>
            </div>
          </div>

          <!-- High Priority Leads -->
          <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
            <div class="p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-red-100 dark:bg-red-900/30 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-500 dark:text-gray-400">High Priority</p>
                  <p id="high-priority-leads" class="text-2xl font-semibold text-gray-900 dark:text-white">-</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Conversion Rate -->
          <div class="bg-white dark:bg-gray-800 overflow-hidden shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
            <div class="p-6">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-purple-100 dark:bg-purple-900/30 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <p class="text-sm font-medium text-gray-500 dark:text-gray-400">This Week</p>
                  <p id="weekly-quotes" class="text-2xl font-semibold text-gray-900 dark:text-white">-</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Filters and Search -->
      <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700 mb-6">
        <div class="p-6">
          <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0 lg:space-x-4">
            <!-- Search -->
            <div class="flex-1 max-w-lg">
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
                <input 
                  type="text" 
                  id="search-input"
                  class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md leading-5 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" 
                  placeholder="Search by name, email, or quote ID..."
                >
              </div>
            </div>

            <!-- Filters -->
            <div class="flex flex-wrap gap-4">
              <!-- Status Filter -->
              <select id="status-filter" class="block px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                <option value="">All Status</option>
                <option value="new">New</option>
                <option value="contacted">Contacted</option>
                <option value="qualified">Qualified</option>
                <option value="closed">Closed</option>
              </select>

              <!-- Priority Filter -->
              <select id="priority-filter" class="block px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                <option value="">All Priority</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>

              <!-- Application Type Filter -->
              <select id="type-filter" class="block px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                <option value="">All Types</option>
                <option value="work_permit">Work Permit</option>
                <option value="study_permit">Study Permit</option>
                <option value="visitor_visa">Visitor Visa</option>
                <option value="express_entry">Express Entry</option>
                <option value="family_sponsorship">Family Sponsorship</option>
                <option value="oinp_ee_bundle">OINP Bundle</option>
              </select>

              <!-- Export Button -->
              <button id="export-csv" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export CSV
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Leads Table -->
      <div class="bg-white dark:bg-gray-800 shadow-sm rounded-lg border border-gray-200 dark:border-gray-700">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white">Quote Requests</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Manage and track all incoming quote requests</p>
        </div>

        <!-- Loading State -->
        <div id="loading-state" class="p-8 text-center">
          <div class="inline-flex items-center">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <span class="text-gray-600 dark:text-gray-400">Loading leads...</span>
          </div>
        </div>

        <!-- Table -->
        <div id="table-container" class="hidden overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            <thead class="bg-gray-50 dark:bg-gray-900">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Lead</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Application</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Value</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Priority</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="leads-table-body" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              <!-- Dynamic content will be inserted here -->
            </tbody>
          </table>
        </div>

        <!-- Empty State -->
        <div id="empty-state" class="hidden p-8 text-center">
          <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">No leads found</h3>
          <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">No quote requests match your current filters.</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Lead Detail Modal -->
  <div id="lead-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <!-- Modal Header -->
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Lead Details</h3>
            <button id="close-modal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <!-- Modal Content -->
          <div id="modal-content">
            <!-- Dynamic content will be inserted here -->
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { createClient } from '@supabase/supabase-js';

  // Initialize Supabase client
  const supabaseUrl = 'https://fneodphdhnnogfuxcpxn.supabase.co';
  const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZuZW9kcGhkaG5ub2dmdXhjcHhuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1NTQyMjIsImV4cCI6MjA3MTEzMDIyMn0.k80VvOi3YTFw_JJjh1cFSR-Yx5neM2XowQyzKjgkySM';
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Global variables
  let allLeads = [];
  let filteredLeads = [];
  let currentUser = null;

  // DOM elements
  const userEmailElement = document.getElementById('user-email');
  const logoutButton = document.getElementById('logout-button');
  const refreshButton = document.getElementById('refresh-data');
  const searchInput = document.getElementById('search-input');
  const statusFilter = document.getElementById('status-filter');
  const priorityFilter = document.getElementById('priority-filter');
  const typeFilter = document.getElementById('type-filter');
  const exportButton = document.getElementById('export-csv');
  const loadingState = document.getElementById('loading-state');
  const tableContainer = document.getElementById('table-container');
  const emptyState = document.getElementById('empty-state');
  const leadsTableBody = document.getElementById('leads-table-body');
  const leadModal = document.getElementById('lead-modal');
  const closeModal = document.getElementById('close-modal');
  const modalContent = document.getElementById('modal-content');

  // Initialize dashboard
  async function initDashboard() {
    try {
      // Check authentication
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        window.location.href = '/admin/login';
        return;
      }

      currentUser = session.user;
      userEmailElement.textContent = currentUser.email;

      // Load initial data
      await loadLeads();
      updateAnalytics();

    } catch (error) {
      console.error('Dashboard initialization error:', error);
      alert('Failed to load dashboard. Please refresh the page.');
    }
  }

  // Load leads from API
  async function loadLeads() {
    try {
      showLoading(true);

      // Get current session for auth token
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        window.location.href = '/admin/login';
        return;
      }

      // Fetch leads from admin API
      const response = await fetch('/api/admin/leads', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Failed to fetch leads');
      }

      allLeads = result.leads || [];
      filteredLeads = [...allLeads];
      
      console.log(`📊 Dashboard: Loaded ${allLeads.length} leads from API`);
      
      renderLeadsTable();
      updateAnalytics();

    } catch (error) {
      console.error('Error loading leads:', error);
      alert('Failed to load leads. Please try again.');
    } finally {
      showLoading(false);
    }
  }

  // Show/hide loading state
  function showLoading(loading) {
    if (loading) {
      loadingState.classList.remove('hidden');
      tableContainer.classList.add('hidden');
      emptyState.classList.add('hidden');
    } else {
      loadingState.classList.add('hidden');
      if (filteredLeads.length > 0) {
        tableContainer.classList.remove('hidden');
        emptyState.classList.add('hidden');
      } else {
        tableContainer.classList.add('hidden');
        emptyState.classList.remove('hidden');
      }
    }
  }

  // Render leads table
  function renderLeadsTable() {
    if (filteredLeads.length === 0) {
      showLoading(false);
      return;
    }

    const tbody = leadsTableBody;
    tbody.innerHTML = '';

    filteredLeads.forEach(lead => {
      const row = createLeadRow(lead);
      tbody.appendChild(row);
    });

    showLoading(false);
  }

  // Create lead table row
  function createLeadRow(lead) {
    const row = document.createElement('tr');
    row.className = 'hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer';
    
    const priorityColor = {
      'high': 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400',
      'medium': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400',
      'low': 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400'
    };

    const statusColor = {
      'new': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400',
      'contacted': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400',
      'qualified': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-400',
      'closed': 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400'
    };

    const applicationTypeNames = {
      'work_permit': 'Work Permit',
      'study_permit': 'Study Permit',
      'visitor_visa': 'Visitor Visa',
      'express_entry': 'Express Entry',
      'family_sponsorship': 'Family Sponsorship',
      'oinp_ee_bundle': 'OINP Bundle'
    };

    row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="flex items-center">
          <div class="flex-shrink-0 h-10 w-10">
            <div class="h-10 w-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
              <span class="text-sm font-medium text-white">${lead.name.charAt(0).toUpperCase()}</span>
            </div>
          </div>
          <div class="ml-4">
            <div class="text-sm font-medium text-gray-900 dark:text-white">${lead.name}</div>
            <div class="text-sm text-gray-500 dark:text-gray-400">${lead.email}</div>
          </div>
        </div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm text-gray-900 dark:text-white">${applicationTypeNames[lead.application_type] || lead.application_type}</div>
        <div class="text-sm text-gray-500 dark:text-gray-400">${lead.location === 'inland' ? 'Inland' : 'Outland'}</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <div class="text-sm font-medium text-gray-900 dark:text-white">$${lead.total_price.toLocaleString()} CAD</div>
        <div class="text-sm text-gray-500 dark:text-gray-400">Score: ${lead.lead_score}/100</div>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${priorityColor[lead.priority] || priorityColor.low}">
          ${lead.priority}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap">
        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${statusColor[lead.status] || statusColor.new}">
          ${lead.status}
        </span>
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
        ${new Date(lead.created_at).toLocaleDateString()}
      </td>
      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <button class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-3" onclick="viewLead('${lead.id}')">
          View
        </button>
        <button class="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300" onclick="emailLead('${lead.email}', '${lead.name}')">
          Email
        </button>
      </td>
    `;

    row.addEventListener('click', () => viewLead(lead.id));
    return row;
  }

  // Update analytics
  function updateAnalytics() {
    const totalQuotes = allLeads.length;
    const totalRevenue = allLeads.reduce((sum, lead) => sum + lead.total_price, 0);
    const highPriorityLeads = allLeads.filter(lead => lead.priority === 'high').length;
    
    // Calculate this week's quotes
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    const weeklyQuotes = allLeads.filter(lead => new Date(lead.created_at) >= oneWeekAgo).length;

    document.getElementById('total-quotes').textContent = totalQuotes.toLocaleString();
    document.getElementById('total-revenue').textContent = `$${totalRevenue.toLocaleString()} CAD`;
    document.getElementById('high-priority-leads').textContent = highPriorityLeads.toLocaleString();
    document.getElementById('weekly-quotes').textContent = weeklyQuotes.toLocaleString();
  }

  // Filter leads
  function filterLeads() {
    const searchTerm = searchInput.value.toLowerCase();
    const statusValue = statusFilter.value;
    const priorityValue = priorityFilter.value;
    const typeValue = typeFilter.value;

    filteredLeads = allLeads.filter(lead => {
      const matchesSearch = !searchTerm || 
        lead.name.toLowerCase().includes(searchTerm) ||
        lead.email.toLowerCase().includes(searchTerm) ||
        lead.id.toLowerCase().includes(searchTerm);
      
      const matchesStatus = !statusValue || lead.status === statusValue;
      const matchesPriority = !priorityValue || lead.priority === priorityValue;
      const matchesType = !typeValue || lead.application_type === typeValue;

      return matchesSearch && matchesStatus && matchesPriority && matchesType;
    });

    renderLeadsTable();
  }

  // View lead details
  window.viewLead = function(leadId) {
    const lead = allLeads.find(l => l.id === leadId);
    if (!lead) return;

    // Create detailed view content
    modalContent.innerHTML = `
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Lead Information -->
        <div class="space-y-6">
          <div>
            <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Contact Information</h4>
            <div class="space-y-3">
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Name</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.name}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Email</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.email}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Quote ID</label>
                <p class="text-sm font-mono text-gray-900 dark:text-white">${lead.id}</p>
              </div>
            </div>
          </div>

          <div>
            <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Application Details</h4>
            <div class="space-y-3">
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Application Type</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.application_type}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Processing Location</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.location}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Family Details</label>
                <p class="text-sm text-gray-900 dark:text-white">
                  ${lead.has_spouse ? 'Has spouse' : 'Single'} 
                  ${lead.dependents_count > 0 ? `+ ${lead.dependents_count} dependent(s)` : ''}
                </p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Prior Refusal</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.prior_refusal ? 'Yes' : 'No'}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Analytics and Actions -->
        <div class="space-y-6">
          <div>
            <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Lead Analytics</h4>
            <div class="space-y-3">
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Quote Value</label>
                <p class="text-lg font-semibold text-gray-900 dark:text-white">$${lead.total_price.toLocaleString()} CAD</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Lead Score</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.lead_score}/100 (${lead.priority} priority)</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Time Spent</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.time_spent_seconds} seconds</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Device</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.device_type}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500 dark:text-gray-400">Source</label>
                <p class="text-sm text-gray-900 dark:text-white">${lead.utm_source} / ${lead.utm_medium}</p>
              </div>
            </div>
          </div>

          <div>
            <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Actions</h4>
            <div class="space-y-3">
              <button onclick="emailLead('${lead.email}', '${lead.name}')" class="w-full inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
                Send Email
              </button>
              
              <div class="grid grid-cols-2 gap-3">
                <select id="status-update-${lead.id}" class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                  <option value="new" ${lead.status === 'new' ? 'selected' : ''}>New</option>
                  <option value="contacted" ${lead.status === 'contacted' ? 'selected' : ''}>Contacted</option>
                  <option value="qualified" ${lead.status === 'qualified' ? 'selected' : ''}>Qualified</option>
                  <option value="closed" ${lead.status === 'closed' ? 'selected' : ''}>Closed</option>
                </select>
                <button onclick="updateLeadStatus('${lead.id}')" class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  Update Status
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    leadModal.classList.remove('hidden');
  };

  // Email lead
  window.emailLead = function(email, name) {
    const subject = encodeURIComponent(`Re: Your Immigration Quote Request`);
    const body = encodeURIComponent(`Hi ${name},\n\nThank you for your interest in our immigration services. I've reviewed your quote request and would like to discuss your case in more detail.\n\nWhen would be a good time for a consultation call?\n\nBest regards,\nImmigratic Team`);
    
    window.open(`mailto:${email}?subject=${subject}&body=${body}`, '_blank');
  };

  // Update lead status
  window.updateLeadStatus = async function(leadId) {
    const statusSelect = document.getElementById(`status-update-${leadId}`);
    const newStatus = statusSelect.value;

    try {
      // Get current session for auth token
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        window.location.href = '/admin/login';
        return;
      }

      // Update lead via API
      const response = await fetch('/api/admin/leads', {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          leadId: leadId,
          status: newStatus
        })
      });

      const result = await response.json();

      if (!result.success) {
        throw new Error(result.error || 'Failed to update lead');
      }

      // Update local data
      const leadIndex = allLeads.findIndex(l => l.id === leadId);
      if (leadIndex !== -1) {
        allLeads[leadIndex].status = newStatus;
        allLeads[leadIndex].updated_at = new Date().toISOString();
      }

      // Refresh display
      filterLeads();
      leadModal.classList.add('hidden');
      
      alert('Lead status updated successfully!');

    } catch (error) {
      console.error('Error updating lead status:', error);
      alert('Failed to update lead status. Please try again.');
    }
  };

  // Export to CSV
  function exportToCSV() {
    const headers = ['Name', 'Email', 'Application Type', 'Location', 'Total Price', 'Lead Score', 'Priority', 'Status', 'Created Date'];
    
    const csvContent = [
      headers.join(','),
      ...filteredLeads.map(lead => [
        `"${lead.name}"`,
        `"${lead.email}"`,
        `"${lead.application_type}"`,
        `"${lead.location}"`,
        lead.total_price,
        lead.lead_score,
        `"${lead.priority}"`,
        `"${lead.status}"`,
        `"${new Date(lead.created_at).toLocaleDateString()}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `Immigratic-Leads-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Event listeners
  logoutButton.addEventListener('click', async () => {
    await supabase.auth.signOut();
    window.location.href = '/admin/login';
  });

  refreshButton.addEventListener('click', loadLeads);
  searchInput.addEventListener('input', filterLeads);
  statusFilter.addEventListener('change', filterLeads);
  priorityFilter.addEventListener('change', filterLeads);
  typeFilter.addEventListener('change', filterLeads);
  exportButton.addEventListener('click', exportToCSV);

  closeModal.addEventListener('click', () => {
    leadModal.classList.add('hidden');
  });

  leadModal.addEventListener('click', (e) => {
    if (e.target === leadModal) {
      leadModal.classList.add('hidden');
    }
  });

  // Initialize dashboard when page loads
  document.addEventListener('DOMContentLoaded', initDashboard);
</script>
</Layout>
